Oracle\xc2\xae NoSQL DatabaseSecurity GuideRelease 18.3E85375-06February 2019Oracle NoSQL Database Security Guide, Release 18.3E85375-06Copyright \xc2\xa9 2011, 2019, Oracle and/or its affiliates. All rights reserved.This software and related documentation are provided under a license agreement containing restrictions onuse and disclosure and are protected by intellectual property laws. Except as expressly permitted in yourlicense agreement or allowed by law, you may not use, copy, reproduce, translate, broadcast, modify,license, transmit, distribute, exhibit, perform, publish, or display any part, in any form, or by any means.Reverse engineering, disassembly, or decompilation of this software, unless required by law forinteroperability, is prohibited.The information contained herein is subject to change without notice and is not warranted to be error-free. Ifyou find any errors, please report them to us in writing.If this is software or related documentation that is delivered to the U.S. Government or anyone licensing it onbehalf of the U.S. Government, then the following notice is applicable:U.S. GOVERNMENT END USERS: Oracle programs, including any operating system, integrated software,any programs installed on the hardware, and/or documentation, delivered to U.S. Government end users are"commercial computer software" pursuant to the applicable Federal Acquisition Regulation and agency-specific supplemental regulations. As such, use, duplication, disclosure, modification, and adaptation of theprograms, including any operating system, integrated software, any programs installed on the hardware,and/or documentation, shall be subject to license terms and license restrictions applicable to the programs.No other rights are granted to the U.S. Government.This software or hardware is developed for general use in a variety of information management applications.It is not developed or intended for use in any inherently dangerous applications, including applications thatmay create a risk of personal injury. If you use this software or hardware in dangerous applications, then youshall be responsible to take all appropriate fail-safe, backup, redundancy, and other measures to ensure itssafe use. Oracle Corporation and its affiliates disclaim any liability for any damages caused by use of thissoftware or hardware in dangerous applications.Oracle and Java are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks oftheir respective owners.Intel and Intel Xeon are trademarks or registered trademarks of Intel Corporation. All SPARC trademarks areused under license and are trademarks or registered trademarks of SPARC International, Inc. AMD, Opteron,the AMD logo, and the AMD Opteron logo are trademarks or registered trademarks of Advanced MicroDevices. UNIX is a registered trademark of The Open Group.This software or hardware and documentation may provide access to or information about content, products,and services from third parties. Oracle Corporation and its affiliates are not responsible for and expresslydisclaim all warranties of any kind with respect to third-party content, products, and services unless otherwiseset forth in an applicable agreement between you and Oracle. Oracle Corporation and its affiliates will not beresponsible for any loss, costs, or damages incurred due to your access to or use of third-party content,products, or services, except as set forth in an applicable agreement between you and Oracle.ContentsPreface Conventions Used in This Book viiIntroducing Oracle NoSQL Database Security1   Security Configuration2   Security Configuration Overview 2-1Configuring Security with Makebootconfig 2-3Configuring Security with Securityconfig 2-4Creating the security configuration 2-4Adding the security configuration 2-7Verifying the security configuration 2-8Updating the security configuration 2-8Showing the security configuration 2-8Removing the security configuration 2-10Merging truststore configuration 2-10Performing a Secure Oracle NoSQL Database Installation3   Single Node Secure Deployment 3-1Adding Security to a New Installation 3-1Adding Security to an Existing Installation 3-4Multiple Node Secure Deployment 3-7Adding Security to a New Installation 3-7Adding Security to an Existing Installation 3-11Kerberos Authentication Service4   Installation Prerequisites 4-1Kerberos Principal 4-1Keytabs 4-2iiiKadmin and kadmin.local 4-2Kerberos Security Properties 4-2Setting Security Properties in a security login file 4-3Setting Security Properties through KVStoreConfig 4-4Using Security Properties to Log In 4-4Using credential cache 4-5Using a keytab 4-6JAAS programming framework integration 4-7Performing a Secure Oracle NoSQL Database Installation with Kerberos 4-8Adding Kerberos to a New Installation 4-9Adding Kerberos to an Existing Secure Installation 4-13Using Oracle NoSQL Database with Kerberos and Microsoft Active Directory (AD) 4-16External Password Storage5   Oracle Wallet 5-1Password store file 5-2Security.xml Parameters6   Top-level parameters 6-1Transport parameters 6-2Encryption7   SSL model 7-1SSL communication properties 7-2Disk Encryption in a Linux Environment 7-3Configuring Authentication8   User Management 8-1User Creation 8-1User Modification 8-3User Removal 8-4User Status 8-4User Login 8-5Password Management 8-6Sessions 8-7ivConfiguring Authorization9   Privileges 9-1System Privileges 9-1Object Privileges 9-2Table Ownership 9-3Privilege Hierarchy 9-3Roles 9-4System Built-in Roles 9-4User-Defined Roles 9-5Managing Roles, Privileges and Users 9-6Role Creation 9-7Role Removal 9-7Role Status 9-7Grant Roles or Privileges 9-8Revoke Roles or Privileges 9-9Security Policies10   Security Policy Modifications 10-1Audit Logging11   Security Log Messages 11-1Keeping Oracle NoSQL Database Secure12   Guidelines for Securing the Configuration 12-1Guidelines for Deploying Secure Applications 12-1Guidelines for Securing the SSL protocol 12-2Guidelines for using JMX securely 12-2Guidelines for Updating Keystore Passwords 12-2Guidelines for Updating Kerberos Passwords 12-4Guidelines for Updating SSL Keys and Certificates 12-6Guidelines for Configuring External Certificates for a new Installation 12-14Guidelines for Configuring External Certificates for an Existing Default SecureInstallation 12-16Guidelines for Updating the External Certificates 12-19Guidelines for Operating System Security 12-21vPassword Complexity PoliciesA   SSL keystore generationB   Java KeyStore PreparationC   Import Key Pair to Java Keystore C-2KVStore Required PrivilegesD   Privileges for Accessing CLI Commands D-1Privileges for DDL Commands D-4Privileges for Accessing KVStore APIs D-5Privileges for Accessing KVStore TableAPIs D-6Privileges for Accessing KvLargeObject APIs D-6Configuring the Kerberos Administrative UtilityE   Manually Registering Oracle NoSQL Database Service PrincipalF   Third Party LicensesG   viPrefaceThis document describes how you can configure security for Oracle NoSQL Databaseusing the default database features.This book is aimed at the systems administrator responsible for the security of anOracle NoSQL Database installation.Conventions Used in This BookThe following typographical conventions are used within this manual:Information that you are to type literally is presented in monospaced font.Variable or non-literal text is presented in italics. For example: "Go to your KVHOMEdirectory."Note:Finally, notes of special interest are represented using a note block such asthis.vii1Introducing Oracle NoSQL DatabaseSecurityOracle NoSQL Database can be configured securely. In a secure configuration,network communications between NoSQL clients, utilities, and NoSQL servercomponents are encrypted using SSL/TLS, and all processes must authenticatethemselves to the components to which they connect.There are two levels of security to be aware of. These are network security, whichprovides an outer layer of protection at the network level, and user authentication/authorization. Network security is configured at the file system level typically during theinstallation process, while user authentication/authorization is managed throughNoSQL utilities.You can use the following Oracle NoSQL Database features to configure security foryour Oracle NoSQL Database installation:\xe2\x80\xa2 Security Configuration Utility. Allows you to configure and add security to anew or to an existing Oracle NoSQL Database installation.\xe2\x80\xa2 Authentication methods. Oracle NoSQL Database provides passwordauthentication for users and systems. The EE version of Oracle NoSQL Databasealso supports Kerberos authentication.\xe2\x80\xa2 Encryption. Data is encrypted on the network to prevent unauthorized access tothat data.\xe2\x80\xa2 External Password Storage. Oracle NoSQL Database provides two types ofexternal password storage methods that you can manipulate (one type for CEdeployments).\xe2\x80\xa2 Security Policies. Oracle NoSQL Database allows you to set up behaviors inorder to ensure a secure environment.\xe2\x80\xa2 Role-based authorization. Oracle NoSQL Database provides predefined systemroles, privileges, and user-defined roles to users. You can set desired privileges tousers by role-granting.In addition, Keeping Oracle NoSQL Database Secure provides guidelines that youshould follow when securing your Oracle NoSQL Database installation.1-1Chapter 1Note:Full Text Search (see Introduction in the Oracle NoSQL Database Full TextSearch guide) and a secure Oracle NoSQL Database store are disjoint, thatis, if Oracle NoSQL Database is configured as a secure store, Full TextSearch should be disabled. On the other hand, if Full Text Search is enabled(that is, an external Elasticsearch cluster is registered) in a nonsecure store,users cannot reconfigure the nonsecure store to a secure store, unless FullText Search is disabled before reconfiguration.For more information, see Security Configuration in the Oracle NoSQLDatabase Full Text Search guide.1-22Security ConfigurationThis chapter describes how to use either the makebootconfig or securityconfig toolto perform the security configuration of your store. If you are installing a store withsecurity for the first time, you can skip ahead to the next chapter Performing a SecureOracle NoSQL Database Installation.Note:For simpler use cases (lab environments) it is possible to perform a basicinstallation of your store by explicitly opting out of security on the commandline. If you do this, your store loses all the security features described in thisbook. For more information see Configuring Security with Makebootconfig.Security Configuration OverviewTo set up security, you need to create an initial security configuration. To do this, runsecurityconfig before, after, or as part of the makebootconfig process beforestarting the SNA on an initial node. You should not create a security configuration ateach node. Instead, you should distribute the initial security configuration across all theStorage Nodes in your store. If the stores do not share a common securityconfiguration they will be unable to communicate with one another.Note:The makebootconfig utility embeds the functionality of securityconfig tool.Th securityconfig tool creates a set of security files based on the standardconfiguration. It is possible to perform the same tasks manually, and advancedsecurity configuration might require manual setup, but using this tool helps to ensure aconsistent setup. For more information on the manual setup, see SSL keystoregeneration.Note:It is possible to modify the security configuration after it is created in order touse a non-standard configuration. It is recommended that you use a standardconfiguration.Those security files are generated, by default, within a directory named "security". In asecure configuration, the bootstrap configuration file for a Storage Node includes a2-1Chapter 2Security Configuration Overviewreference to that directory, which must be within the KVROOT directory for the StorageNode. The security directory contains:security/security.xmlsecurity/store.keyssecurity/store.trustsecurity/store.passwd  (CE or EE installations)security/store.wallet  (EE installations only)security/store.wallet/cwallet.sso (EE installations only)security/client.securitysecurity/client.trust where:\xe2\x80\xa2 security.xmlA configuration file that tells the Oracle NoSQL Database server how to applysecurity.\xe2\x80\xa2 store.keysA Java keystore file containing one or more SSL/TLS key pairs. This keystore isprotected by a keystore password, which is recorded in an accompanyingpassword store. The password store may be either an Oracle Wallet or aFileStore. The password is stored under the alias "keystore" in the password store.This file should be accessible only by the Oracle NoSQL Database serverprocesses, and not to Oracle NoSQL Database clients.\xe2\x80\xa2 store.trustA Java truststore file, which is a keystore file that contains only public certificates,and no private keys.\xe2\x80\xa2 store.passwd (CE or EE installations)A password file that acts as the password store for a Community Edition (CE)installation. It contains secret information that should be known only to the serverprocesses. Make sure the password file is readable and writable only by theOracle NoSQL Database server. The file should not be copied to client machines.For Enterprise Edition (EE) installations, Oracle Wallet usage is preferred over thepassword file option.\xe2\x80\xa2 store.wallet (EE installations only)An Oracle Wallet directory that acts as the password store for an EnterpriseEdition (EE) installation. It contains secret information that should be known onlyto the server processes. Make sure the directory and its contents are readable andwritable only by Oracle NoSQL Database. The file should not be copied to clientmachines.\xe2\x80\xa2 cwallet.sso (EE installations only)The wallet password storage file.\xe2\x80\xa2 client.securityA security configuration file that captures the communication transport propertiesfor connecting clients to KVStore.The generated client.security file should be copied to and used by Oracle NoSQLDatabase clients when connecting to the KVStore.2-2Chapter 2Configuring Security with Makebootconfig\xe2\x80\xa2 client.trustA truststore file used by clients is generated.The generated client.trust file should be copied to and used by Oracle NoSQLDatabase clients when connecting to the KVStore.Note:In a multi-host store environment, the security directory and all filescontained in it should be copied to each server that will host a Storage Node.Configuring Security with MakebootconfigUse the makebootconfig command with the -store-security option to set up thebasic store configuration with security:java -Xmx64m -Xms64m-jar KVHOME/lib/kvstore.jar makebootconfig-root <kvroot> -port <port>-host <hostname> -harange <harange>-store-security configure -capacity <capacity>[-secdir <security dir>][-pwdmgr {pwdfile | wallet | <class-name>}][-kspwd <password>][-external-auth {kerberos}][-krb-conf <kerberos configuration>][-kadmin-path <kadmin utility path>][-instance-name <database instance name>][-admin-principal <kerberos admin principal name>][-kadmin-keytab <keytab file>][-kadmin-ccache <credential cache file>][-princ-conf-param <param=value>]*[-security-param <param=value>]*[-noadmin] where -store-security has the following options:\xe2\x80\xa2 -store-security noneNo security will be used. If a directory named "security" exists, a warning messagewill be displayed. When you opt out of security, you lose all the security features inyour store; you are not able to set password authentication for users and systems,encrypt your data to prevent unauthorized access, etc.\xe2\x80\xa2 -store-security configureSecurity will be used and the security configuration utility will be invoked aspart of the makebootconfig process. If the security directory already exists, anerror message is displayed, otherwise the directory will be created.For script-based configuration you can use the -kspwd<password> option to allowtools to specify the keystore password on the command line. If it is not specified,the user is prompted to enter the password.2-3Chapter 2Configuring Security with SecurityconfigUse the -pwdmgr option to select a password manager implementation. Its usageis introduced later in this section.Use the -external-auth option to specify Kerberos as an external authenticationservice. This option is only available in the Oracle NoSQL Database EE version. Ifinformation for the Kerberos admin interface (e.g. password) is needed and nokeytab or credential cache has been specified on the command line, an interactiveversion of securityconfig config create utility will run.Using the -external-auth flag allows Oracle NoSQL Database to generate thesecurity files needed for Kerberos authentication, based on a standardconfiguration. Although not recommended, it is possible to use a non-standardconfiguration. To do this, see Manually Registering Oracle NoSQL DatabaseService Principal\xe2\x80\xa2 -store-security enableSecurity will be used. You will need to configure security either by utilizing thesecurity configuration utility or by copying a previously created configurationfrom another system.Note:The -store-security command is optional. Even if the user does notspecify -store-security, it would be enabled by default.For more information on configuring security with makebootconfig, see AddingSecurity to a New Installation.Configuring Security with SecurityconfigYou can also run the securityconfig tool before or after the makebootconfig processby using the following command:java -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar securityconfig For more information on creating, adding, removing or merging the securityconfiguration using securityconfig, see the following sections.Creating the security configurationYou can use the config create command to create the security configuration:config create-root <secroot> [ -secdir <security dir> ][-pwdmgr { pwdfile | wallet <class-name>} ][-kspwd <password> ][-external-auth {kerberos}]  [-krb-conf <kerberos configuration>]  [-kadmin-path <kadmin utility path>]  [-instance-name <database instance name>]  [-admin-principal <kerberos admin principal name>]  [-kadmin-keytab <keytab file>]2-4Chapter 2Configuring Security with Securityconfig  [-kadmin-ccache <credential cache file>]  [-princ-conf-param <param=value>]*[-param [client:|ha:|internal:|]<param>=<value>]* where:\xe2\x80\xa2 -root <secroot>Specifies the directory in which the security configuration will be created. It is notrequired that this directory be a full KVROOT, but the directory must exist.\xe2\x80\xa2 -external-auth {kerberos} Specifies Kerberos as an external authenticationservice. This option is only available in the Oracle NoSQL Database EE version. Ifno keytab or credential cache has been specified on the command line, aninteractive version of the securityconfig utility will run.Using this flag allows Oracle NoSQL Database to generate the security filesneeded for Kerberos authentication, based on a standard configuration. Althoughnot recommended, it is possible to use a non-standard configuration. To do this,see Manually Registering Oracle NoSQL Database Service PrincipalThis flag is only permitted when the value of the -store-security flag is specifiedas configure or enable.To remove Kerberos authentication from a running store, set the value of theuserExternalAuth security.xml parameter to NONE.where -external-auth can have the following flags:\xe2\x80\x93 -admin-principal <kerberos admin principal name>Specifies the principal used to login to the Kerberos admin interface. This isrequired while using kadmin keytab or password to connect to the admininterface.\xe2\x80\x93 -kadmin-ccache <credential cache file>Specifies the complete path name to the Kerberos credentials cache file thatshould contain a service ticket for the kadmin/ADMINHOST. ADMINHOST is thefully-qualified hostname of the admin server or kadmin/admin service.If not specified, the user is prompted to enter the password for principal whilelogging to the Kerberos admin interface. This flag cannot be specified inconjunction with the -kadmin-keytab flag.\xe2\x80\x93 -kadmin-keytab <keytab file>Specifies the location of a Kerberos keytab file that stores Kerberos adminuser principals and encrypted keys. The security configuration tool will use thespecified keytab file to login to the Kerberos admin interface.The default location of the keytab file is specified by the Kerberosconfiguration file. If the keytab is not specified there, then the system looks forthe file user.home/krb5.keytab.You need to specify the -admin-principal flag when using keytab to login tothe Kerberos admin, otherwise the correct admin principal will not berecognized. This flag cannot be specified in conjunction with the -kadmin-ccache flag.\xe2\x80\x93 -kadmin-path <kadmin utility path>2-5Chapter 2Configuring Security with SecurityconfigIndicates the absolute path of the Kerberos kadmin utility. The default valueis /usr/kerberos/sbin/kadmin.\xe2\x80\x93 -krb-conf <kerberos configuration>Specifies the location of the Kerberos configuration file that contains thedefault realm and KDC information. If not specified, the default value is /etc/krb5.conf.\xe2\x80\x93 -princ-conf-param <param=value>*A repeatable argument that allows configuration defaults to be overridden.Use the krbPrincValidity parameter to specify the expiration date of theOracle NoSQL Database Kerberos service principal.Use the krbPrincPwdExpire parameter to specify the password expirationdate of the Oracle NoSQL Database Kerberos service principal.Use the krbKeysalt parameter to specify the keysalt list used to generate thekeytab file.\xe2\x80\xa2 -secdir <security dir>Specifies the name of the directory within KVROOT that will hold the securityconfiguration. This must be specified as a name relative to the specified secroot. Ifnot specified, the default value is "security".\xe2\x80\xa2 -pwdmgr [ pwdfile | wallet ]Indicates the password manager mechanism used to hold passwords that areneeded for accessing keystores, etc.where -pwdmgr can have the following options:\xe2\x80\x93 -pwdmgr pwdfileIndicates that the password store is a read-protected clear-text password file.This is the only available option for Oracle NoSQL Database CE deployments.You can specify an alternate implementation. For more information on pwdfilemanipulation, see Password store file\xe2\x80\x93 -pwdmgr walletSpecifies Oracle Wallet as the password storage mechanism. This option isonly available in the Oracle NoSQL Database EE version. For moreinformation on Oracle wallet manipulation, see Oracle Wallet\xe2\x80\xa2 -param [client:|ha:|internal:|]<param>=<value>]A repeatable argument that allows configuration defaults to be overridden. Thevalue may be either a simple parameter, such as "truststore", or a qualifiedparameter such as "client:serverKeyAlias". If specified in qualified form, thequalifier (for example, "client") names a transport within the security configuration,and the assignment is specific to that transport. If in simple form, it applies toeither the securityParams structure or to all transports within the file, depending onthe type of parameter.For more information on configuring security with securityconfig, see Performing aSecure Oracle NoSQL Database Installation.For more information on configuring Kerberos with securityconfig, see KerberosAuthentication Service.2-6Chapter 2Configuring Security with SecurityconfigAdding the security configurationYou can use the config add-security command to add the security configuration youcreated earlier:config add-security-root <kvroot> [-secdir <security dir>][-config <config.xml>] Note:When running this command, the securityconfig tool will verify theexistence of the referenced files and will update the specified bootstrapconfiguration file to refer to the security configuration. This process isnormally done with the KVStore instance stopped, and must be performed oneach Storage Node of the store.where:\xe2\x80\xa2 -root <kvroot>A KVStore root directory must be provided as an argument.\xe2\x80\xa2 -secdir <security dir>Specifies the name of the directory within the KVROOT that holds the securityconfiguration. This must be specified as a name relative to the KVROOT. If notspecified, the default value is "security".\xe2\x80\xa2 -config <config.xml>Specifies the bootstrap configuration file that is to be updated. This must bespecified as a name relative to the KVROOT. If not specified, the default value is"config.xml".When using Kerberos as an external authentication service, you can use the configadd-kerberos command to add the security configuration you created earlier:config add-kerberos -root <secroot> [-secdir <security dir>][-krb-conf <Kerberos configuration>][-kadmin-path <kadmin utility path>][-instance-name <database instance name>][-admin-principal <kerberos admin principal name>][-kadmin-keytab <keytab file> ][-kadmin-ccache <credential cache file>][-princ-conf-param <param=value>]*[-param <param=value>]* 2-7Chapter 2Configuring Security with SecurityconfigVerifying the security configurationYou can use the config verify command to verify the consistency and correctness ofa security configuration:config verify -secdir <security dir> where:\xe2\x80\xa2 -secdir <securitydir>Specifies the name of the directory within the KVROOT that holds the securityconfiguration. This must be specified as a name relative to the KVROOT. If notspecified, the default value is "security".For example:security-> config verify -secdir securitySecurity configuration verification passed. Updating the security configurationYou can use the config update command to update the security parameters of asecurity configuration:config update -secdir <security dir> [-param <param=value>]*where:\xe2\x80\xa2 -secdir <securitydir>Specifies the name of the directory within the KVROOT that holds the securityconfiguration. This must be specified as a name relative to the KVROOT. If notspecified, the default value is "security".\xe2\x80\xa2 -param <param=value*>List of security parameters to update.For example:security-> config update -secdir security -param clientAuthRequired=falseSecurity parameters updated. Showing the security configurationYou can use the config show command to print out all security configurationinformation.config show -secdir <security dir> where:2-8Chapter 2Configuring Security with SecurityconfigFor example:security-> config show -secdir securitySecurity parameters:certMode=sharedinternalAuth=sslkeystore=store.keyskeystorePasswordAlias=keystorepasswordClass=oracle.kv.impl.security.filestore.FileStoreManagerpasswordFile=store.passwdsecurityEnabled=truetruststore=store.trustinternal Transport parameters:clientAllowProtocols=TLSv1.2,TLSv1.1,TLSv1clientAuthRequired=trueclientIdentityAllowed=dnmatch(CN=NoSQL)clientKeyAlias=sharedserverIdentityAllowed=dnmatch(CN=NoSQL)serverKeyAlias=sharedtransportType=sslclient Transport parameters:clientAllowProtocols=TLSv1.2,TLSv1.1,TLSv1serverIdentityAllowed=dnmatch(CN=NoSQL)serverKeyAlias=sharedtransportType=sslha Transport parameters:allowProtocols=TLSv1.2,TLSv1.1,TLSv1clientAuthRequired=trueclientIdentityAllowed=dnmatch(CN=NoSQL)serverIdentityAllowed=dnmatch(CN=NoSQL)serverKeyAlias=sharedtransportType=sslKeystore:security/store.keysKeystore type: JKSKeystore provider: SUNYour keystore contains 1 entryshared, Jun 1, 2016, PrivateKeyEntry,Certificate fingerprint (SHA1): A6:54:9C:42:13:66:DC:E9:A8:62:DB:A8:87:FD:DE:23:F7:AD:11:FBKeystore:security/store.trustKeystore type: JKSKeystore provider: SUNYour keystore contains 1 entry2-9Chapter 2Configuring Security with Securityconfigmykey, Jun 1, 2016, trustedCertEntry,Certificate fingerprint (SHA1):A6:54:9C:42:13:66:DC:E9:A8:62:DB:A8:87:FD:DE:23:F7:AD:11:FB \xe2\x80\xa2 -secdir <securitydir>Specifies the name of the directory within the KVROOT that holds the securityconfiguration. This must be specified as a name relative to the KVROOT. If notspecified, the default value is "security".Removing the security configurationIf you want to disable security for some reason in an existing installation, you can usethe config remove-security command:config remove-security -root <kvroot> [-config <config.xml>] Note:When running this command, the securityconfig tool will update thespecified bootstrap configuration file to refer to the security configuration.This process is normally done with the KVStore instance stopped, and mustbe performed on each Storage Node of the store.where:\xe2\x80\xa2 -root <kvroot>A KVStore root directory must be provided as an argument.\xe2\x80\xa2 -config <config.xml>Specifies the bootstrap configuration file that is to be updated. This must bespecified as a name relative to the KVROOT. If not specified, the default value is"config.xml".For example:security-> config remove-security -secdir securityConfiguration updated. Merging truststore configurationIf you want to merge truststore entries from one security configuration into anothersecurity configuration use the config merge-trust command. This command ishelpful when performing security maintenance, particularly when you need to update2-10Chapter 2Configuring Security with Securityconfigthe SSL key/certificate. For more information, see Guidelines for Updating SSL Keysand Certificatesconfig merge-trust-root <secroot> [-secdir <security dir>]-source-root <secroot> [-source-secdir <security dir>]Note:When running this command, the securityconfig tool will verify theexistence of the referenced files and will combine trust entries from thesource security configuration into the primary security configuration.where:\xe2\x80\xa2 -root <secroot>Specifies the directory that contains the security configuration that will be updated.It is not required that this directory be a full KVROOT, but the directory must existand contain an existing security configuration.\xe2\x80\xa2 -secdir <security dir>Specifies the name of the directory within the secroot that holds the securityconfiguration. This must be specified as a name relative to the secroot. If notspecified, the default value is "security".\xe2\x80\xa2 -source-root <secroot>Specifies the directory that contains the security configuration that will provide newtrust information. It is not required that this directory be a full KVROOT, but thedirectory must exist and must contain an existing security configuration.\xe2\x80\xa2 -source-secdir <security dir>Specifies the name of the security directory within the source secroot that willprovide new trust information. If not specified, the default value is "security".2-113Performing a Secure Oracle NoSQLDatabase InstallationIt is possible to add security to a new or an existing Oracle NoSQL Databaseinstallation.To add security to a new or an existing Oracle NoSQL Database single hostdeployment, see the next section. For multiple node deployments, see Multiple NodeSecure Deployment.If you want to use Kerberos as an external authentication service, you should insteadcomplete the steps under Performing a Secure Oracle NoSQL Database Installationwith Kerberos.Single Node Secure DeploymentThe following examples describe how to add security to a new or an existing OracleNoSQL Database single host deployment.Adding Security to a New InstallationTo install Oracle NoSQL Database securely:1. Run the makebootconfig utility with the -store-security option to set up thebasic store configuration with security:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 5000 \\-host node01 -harange 5010,5020 \\-store-security configure -pwdmgr pwdfile -capacity 1 2. In this example, -store-security configure is used, so the securityconfiguration utility is run as part of the makebootconfig process and you areprompted for a password to use for your keystore file:Enter a password for the Java KeyStore: 3. Enter a password for your store and then reenter it for verification. In this case, thepassword file is used, and the securityconfig tool will automatically generate thefollowing security related files:Enter a password for the Java KeyStore: ***********Re-enter the KeyStore password for verification: ***********Created files:security/client.trustsecurity/client.securitysecurity/store.keys3-1Chapter 3Single Node Secure Deploymentsecurity/store.trustsecurity/store.passwdsecurity/security.xml Note:In a multi-host store environment, the security directory and all filescontained in it should be copied to each server that will host a StorageNode.4. Start the Storage Node Agent (SNA):Note:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.nohup java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar start -root KVROOT &When a newly created store with a secure configuration is first started, there areno user definitions available against which to authenticate access. In order toreduce risk of unauthorized access, an admin will only allow you to connect to itfrom the host on which it is running. This security measure is not a completesafeguard against unauthorized access. It is important that you do not providelocal access to machines running KVStore. In addition, you should perform steps5, 6 and 7 soon after this step in order to minimize the time period in which theadmin might be accessible without full authentication. For more information onmaintaining a secure store see Guidelines for Securing the Configuration.5. Start runadmin in security mode on the KVStore server host (node01). To do this,use the following command:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar \\runadmin -port 5000 -host node01 \\-security KVROOT/security/client.securityLogged in admin as anonymous 6. Use the configure -name command to specify the name of the KVStore that youwant to configure:kv-> configure -name mystoreStore configured: mystore 3-2Chapter 3Single Node Secure Deployment7. Create an admin user. The password should comply with the security policiesdescribed in Password Complexity Policies. In this case, user root is defined:kv-> plan create-user -name root -admin -waitEnter the new password: ********Re-enter the new password: ********Executed plan 6, waiting for completion...Plan 6 ended successfully  For more information on user creation and administration, see User Management.8. Create a new password file to store the credentials needed to allow clients to loginas the admin user (root):java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig \\pwdfile create -file KVROOT/security/login.passwdjava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig pwdfile secret \\-file KVROOT/security/login.passwd -set -alias rootEnter the secret value to store: ********Re-enter the secret value for verification: ********Secret createdNote:The password must match the one set for the admin in the previous step.For more information on user creation and administration, see User Management.9. At this point, it is possible to connect to the store as the root user. To login, youcan use either the -username <user> runadmin argument or specify the"oracle.kv.auth.username" property in the security file.In this example, a security file (mylogin.txt) is used. To login, use the followingcommand:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 \\-host localhost -security myloginLogged in admin as root The file mylogin.txt should be a copy of the client.security file with additionalproperties settings for authentication. The file would then contain content like this:oracle.kv.auth.username=rootoracle.kv.auth.pwdfile.file=KVROOT/security/login.passwdoracle.kv.transport=ssloracle.kv.ssl.trustStore=KVROOT/security/client.trustoracle.kv.ssl.protocols=TLSv1.2,TLSv1.1,TLSv1oracle.kv.ssl.hostnameVerifier=dnmatch(CN\\=NoSQL) 3-3Chapter 3Single Node Secure DeploymentNote that the hostname verifier provides a way for NoSQL Database clients tospecify the name that they expect the NoSQL Database server hosts to use duringSSL handshake (when they attempt to connect server using SSL/TLS).For a secure store using the standard configuration, server hosts will be requiredto authenticate themselves, and clients will use their SSL truststore to confirm thatthe server authenticates with a trusted identity. The hostname verifier provides theadditional assurance that the server host authenticates using the expectedidentity, not just any trusted identity.This additional check is desirable if either the truststore contains multiplecertificates or if the certificate it contains is a CA certificate rather than a self-signed or leaf certificate. In both those cases, the truststore can vouch for multipleidentities. The host verifier allows the user to specify the specific identity that isexpected.The only hostname verifier currently supported is the dnmatch verifier, whichmust be specified in the form of dnmatch(distinguished-name), wheredistinguished name must be the NoSQL DB server certificate\'s distinguishedname. If you are using the default security configuration, then the hostnameverifier in the example specifies that the server should authenticate with acertificate whose distinguished name is CN=NoSQL. This is the name used in theserver certificates that the system generates by default.The verification is performed by checking if the distinguished name of servercertificate match the specified dnmatch expressions, which uses regularexpressions as specified by java.util.regex.Pattern. The distinguishedname specified in dnmatch must be in RFC 1779 format, using the exact order,capitalization, and spaces of the attribute value. RFC 1779 defines well-knownattributes for distinguished names, including CN, L, ST O, OU, C and STREET. Ifthe distinguished name of the external certificate contains non-standard attributes,for example, EMAILADDRESS, then the expression used for dnmatch mustreplace these attribute names with an OID that is valid in RFC 1779 form, or usespecial constructs of regular expression to skip checking these attributes. If youare using a wild card to match a certificate with a non-standard distinguishedname attribute, the dnmatch expression needs to match the attribute name in itsOID format properly.For more information, see User Login.Adding Security to an Existing InstallationTo add security to an existing Oracle NoSQL Database installation:1. Shut down the KVStore instance:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar stop \\-root KVROOT2. Run the securityconfig utility to set up the basic store configuration with security:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig3. Use the config create command with the -pwdmgr option to specify themechanism used to hold passwords that is needed for accessing the stores. In this3-4Chapter 3Single Node Secure Deploymentcase, Oracle Wallet is used. Oracle Wallet is only available in the Oracle NoSQLDatabase EE version. CE deployments should use the pwdfile option instead.config create -pwdmgr wallet -root KVROOTEnter a password for the Java KeyStore: 4. Enter a password for your store and then reenter it for verification. Theconfiguration tool will automatically generate some security related files:Enter a password for the Java KeyStore: ***********Re-enter the KeyStore password for verification: ***********Created files:security/security.xmlsecurity/store.keyssecurity/store.trustsecurity/store.wallet/cwallet.ssosecurity/client.securitysecurity/client.trust  Note:In a multi-host store environment, the security directory and all filescontained in it should be copied to each server that will host a StorageNode.5. Use the config add-security command to add the security configuration you justcreated:security-> config add-security -root KVROOT-secdir security  -config config.xmlConfiguration updated. Note:When running this command, the securityconfig tool will verify theexistence of the referenced files and will update the specified bootstrapconfiguration file to refer to the security configuration. This process isnormally done with the KVStore instance stopped, and must beperformed on each Storage Node of the store.6. Start the Storage Node Agent (SNA):3-5Chapter 3Single Node Secure DeploymentNote:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.nohup java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar start -root KVROOT&7. Start runadmin in security mode on the KVStore server host (node01). To do this,use the following command:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar \\runadmin -port 5000 -host node01 \\-security KVROOT/security/client.securityLogged in admin as anonymous.This command sets SSL as a connection method and names a copy of thegenerated truststore file (client.security). For more information on SSL properties,see SSL communication properties.8. Create an admin user. The password should comply with the security policiesdescribed in Password Complexity Policies. In this case, user root is defined:kv-> plan create-user -name root -admin -waitEnter the new password: ********Re-enter the new password: ********Executed plan 8, waiting for completion...Plan 8 ended successfully For more information on user creation and administration, see User Management.9. Create a new wallet file to store the credentials needed to allow clients to login asthe admin user (root):java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig \\wallet create -dir KVROOT/security/login.walletjava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig wallet secret \\-dir KVROOT/security/login.wallet -set -alias rootEnter the secret value to store: ********Re-enter the secret value for verification: ********Secret createdNote:The password must match the one set for the admin in the previous step.3-6Chapter 3Multiple Node Secure DeploymentFor more information on user creation and administration, see User Management.10. At this point, it is possible to connect to the store as the root user. To login, youcan use either the -username <user> runadmin argument or specify the"oracle.kv.auth.username" property in the security file.In this example, the oracle.kv.security property is used. To login use the followingcommand:java -Xmx64m -Xms64m \\-Doracle.kv.security=mylogin \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 -host localhostLogged in admin as rootThe file mylogin.txt should be a copy of the client.security file with additionalproperties settings for authentication. The file would then contain content like this:oracle.kv.auth.username=rootoracle.kv.auth.wallet.dir=KVROOT/security/login.walletoracle.kv.transport=ssloracle.kv.ssl.trustStore=KVROOT/security/client.trustoracle.kv.ssl.protocols=TLSv1.2,TLSv1.1,TLSv1oracle.kv.ssl.hostnameVerifier=dnmatch(CN\\=NoSQL) For more information, see User Login.Multiple Node Secure DeploymentThe following examples describe how to add security to a new or to an existing OracleNoSQL Database multiple host deployment.Adding Security to a New InstallationTo install an Oracle NoSQL Database three node, capacity=3 (3x3) securedeployment:1. Run the makebootconfig utility with the -store-security option to set up thebasic store configuration with security:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 5000 \\-host node01 -harange 5010,5020 \\-store-security configure -pwdmgr wallet -capacity 32. In this example, -store-security configure is used, so the securityconfiguration utility is run as part of the makebootconfig process and you areprompted for a password to use for your keystore file:Enter a password for the Java KeyStore: 3-7Chapter 3Multiple Node Secure Deployment3. Enter a password for your store and then reenter it for verification. For example,using wallet, the securityconfig tool will automatically generate the followingsecurity related files:Enter a password for the Java KeyStore: ***********Re-enter the KeyStore password for verification: ***********Created files:security/security.xmlsecurity/store.keyssecurity/store.trustsecurity/store.wallet/cwallet.ssosecurity/client.securitysecurity/client.trust 4. In a multi-host store environment, the security directory and all files contained in itshould be copied from the first node to each server that will host a Storage Node,to setup internal cluster authentication. For example, the following commandsassume that the different nodes are visible and accessible on the current node(node01):cp -R node01/KVROOT/security node02/KVROOT/cp -R node01/KVROOT/security node03/KVROOT/ Note:You may need to use a remote copying command, like scp, to do thecopying if the files for the different nodes are not visible on the currentnode.5. Enable security on the other two nodes using the -store-security enablecommand:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT \\-host node02 \\-port 6000 \\-harange 6010,6020 \\-capacity 3 \\-store-security enable \\-pwdmgr walletjava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT \\-host node03 \\-port 7000 \\-harange 7010,7020 \\-capacity 3 \\-store-security enable \\-pwdmgr wallet3-8Chapter 3Multiple Node Secure Deployment6. Start the Storage Node Agent (SNA) on each node:Note:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.nohup java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar start -root KVROOT&7. Start runadmin in security mode on the KVStore server host (node01). To do this,use the following command:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar \\runadmin -port 5000 -host node01 \\-security KVROOT/security/client.securityLogged in admin as anonymous8. Use the configure -name command to specify the name of the KVStore that youwant to configure:kv-> configure -name mystoreStore configured: mystore 9. Create an admin user. The password should comply with the security policiesdescribed in Password Complexity Policies. In this case, user root is defined:kv-> plan create-user -name root -admin -waitEnter the new password: ********Re-enter the new password: ********Executed plan 6, waiting for completion...Plan 6 ended successfully  For more information on user creation and administration, see User Management.10. Create the wallet to enable client credentials for the admin user (root):java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig \\wallet create -dir KVROOT/security/login.walletjava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig wallet secret \\-dir KVROOT/security/login.wallet -set -alias rootEnter the secret value to store: ********Re-enter the secret value for verification: ********Secret created3-9Chapter 3Multiple Node Secure DeploymentNote:The password must match the one set for the admin in the previous step.11. At this point, it is possible to connect to the store as the root user. To login, youcan use either the -username <user> runadmin argument or specify the"oracle.kv.auth.username" property in the security file.In this example, a security file (adminlogin.txt) is used. To login, use the followingcommand:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 \\-host localhost -security adminloginLogged in admin as rootThe file adminlogin.txt should be a copy of the client.security file withadditional properties settings for authentication. The file would then containcontent like this:oracle.kv.auth.username=rootoracle.kv.auth.wallet.dir=KVROOT/security/login.walletoracle.kv.transport=ssloracle.kv.ssl.trustStore=KVROOT/security/client.trustoracle.kv.ssl.protocols=TLSv1.2,TLSv1.1,TLSv1oracle.kv.ssl.hostnameVerifier=dnmatch(CN\\=NoSQL) For more information, see User Login.12. Once logged in as admin, you can create some users:kv-> plan create-user -name user1 -waitEnter the new password: ********Re-enter the new password: ********Executed plan 7, waiting for completion...Plan 7 ended successfully kv-> plan create-user -name user2 -waitEnter the new password: ********Re-enter the new password: ********Executed plan 8, waiting for completion...Plan 8 ended successfully 13. Create the wallet to enable client credentials for each user. Typically you will reusethis wallet for all your regular users:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig \\wallet create -dir KVROOT/security/users.walletjava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig wallet secret \\-dir KVROOT/security/users.wallet -set -alias user13-10Chapter 3Multiple Node Secure DeploymentEnter the secret value to store: ********Re-enter the secret value for verification: ********Secret createdjava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig wallet secret \\-dir KVROOT/security/users.wallet -set -alias user2Enter the secret value to store: ********Re-enter the secret value for verification: ********Secret created Note:Each password must match the one set for each user in the previousstep. This wallet is independent from the admin one. It is possible tostore admin/user passwords using the same wallet.14. At this point, it is possible to connect to the store as a user. To login, you can useeither the -username <user> runadmin argument or specify the"oracle.kv.auth.username" property in the security file.In this example, a security file (userlogin.txt) is used. To login, use the followingcommand:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 \\-host localhost -security userloginLogged in admin as user1The file userlogin.txt should be a copy of the client.security file withadditional properties settings for authentication. The file would then containcontent like this:oracle.kv.auth.username=user1oracle.kv.auth.wallet.dir=KVROOT/security/users.walletoracle.kv.transport=ssloracle.kv.ssl.trustStore=KVROOT/security/client.trustoracle.kv.ssl.protocols=TLSv1.2,TLSv1.1,TLSv1oracle.kv.ssl.hostnameVerifier=dnmatch(CN\\=NoSQL) For more information, see User Login.Adding Security to an Existing InstallationTo add security to an existing three node, capacity=3 (3x3) Oracle NoSQL Databaseinstallation:1. Shut down the KVStore instance on each node:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar stop \\-root KVROOT3-11Chapter 3Multiple Node Secure Deployment2. Run the securityconfig utility to set up the basic store configuration with security:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig3. Use the config create command with the -pwdmgr option to specify themechanism used to hold passwords that is needed for accessing the stores. In thiscase, Oracle Wallet is used:config create -pwdmgr wallet -root KVROOTEnter a password for the Java KeyStore:4. Enter a password for your store and then reenter it for verification. Theconfiguration tool will automatically generate some security related files:Enter a password for the Java KeyStore: ***********Re-enter the KeyStore password for verification: ***********Created files:security/security.xmlsecurity/store.keyssecurity/store.trustsecurity/store.wallet/cwallet.ssosecurity/client.securitysecurity/client.trust  5. In a multi-host store environment, the security directory and all files contained in itshould be copied from the first node to each server that will host a Storage Node,to setup internal cluster authentication. For example, the following commandsassume that the different nodes are visible and accessible on the current node(node01):cp -R node01/KVROOT/security node02/KVROOT/cp -R node01/KVROOT/security node03/KVROOT/ Note:You may need to use a remote copying command, like scp, to do thecopying if the files for the different nodes are not visible on the currentnode.6. Use the config add-security command on each node to add the securityconfiguration you just created:security-> config add-security -root KVROOT -secdir security 3-12Chapter 3Multiple Node Secure DeploymentNote:When running this command, the securityconfig tool will verify theexistence of the referenced files and will update the specified bootstrapconfiguration file to refer to the security configuration. This process isnormally done with the KVStore instance stopped, and must beperformed on each Storage Node of the store.7. Start the Storage Node Agent (SNA) on each node:Note:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar start -root KVROOT&8. Start runadmin in security mode on the KVStore server host (node01). To do this,use the following command:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar \\runadmin -port 5000 -host node01 \\-security KVROOT/security/client.security This command sets SSL as a connection method and names a copy of thegenerated truststore file (client.security). For more information on SSL properties,see SSL communication properties.9. Create an admin user. The password should comply with the security policiesdescribed in Password Complexity Policies. In this case, user root is defined:kv-> plan create-user -name root -admin -waitEnter the new password: ********Re-enter the new password: ********Executed plan 8, waiting for completion...Plan 8 ended successfully For more information on user creation and administration, see User Management.10. Create the wallet to enable client credentials for the admin user (root):java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig \\wallet create -dir KVROOT/security/login.walletjava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig wallet secret \\-dir KVROOT/security/login.wallet -set -alias root3-13Chapter 3Multiple Node Secure DeploymentEnter the secret value to store: ********Re-enter the secret value for verification: ********Secret createdNote:The password must match the one set for the admin in the previous step.11. At this point, it is possible to connect to the store as the root user. To login, youcan use either the -username <user> runadmin argument or specify the"oracle.kv.auth.username" property in the security file.In this example, the oracle.kv.security property is used. To login use the followingcommand:java -Xmx64m -Xms64m \\-Doracle.kv.security=adminlogin \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 -host localhostLogged in admin as root >The file adminlogin.txt should be a copy of the client.security file withadditional properties settings for authentication. The file would then containcontent like this:oracle.kv.auth.username=rootoracle.kv.auth.wallet.dir=KVROOT/security/login.walletoracle.kv.transport=ssloracle.kv.ssl.trustStore=KVROOT/security/client.trustoracle.kv.ssl.protocols=TLSv1.2,TLSv1.1,TLSv1oracle.kv.ssl.hostnameVerifier=dnmatch(CN\\=NoSQL) For more information, see User Login.3-144Kerberos Authentication ServiceExisting or new installations of Oracle NoSQL Database can be configured to useKerberos as an external authentication service. Kerberos is an industry standardauthentication protocol for large client/server systems.Setting up and configuring a Kerberos deployment is beyond the scope of this chapter.This chapter assumes that you have a running Key Distribution Center (KDC) andrealm setup.This chapter first describes some Kerberos concepts and then shows you how toconfigure existing or new installations of Oracle NoSQL Database to use Kerberos asan external authentication service.Installation PrerequisitesMake sure that you have Kerberos V5 installed. Oracle NoSQL Database iscompatible and tested with MIT Kerberos V5.If your Kerberos installation/keytab is configured to use a strong encryption type \xe2\x80\x94 forexample, AES with 256-bit keys \xe2\x80\x94 the JCE Unlimited Strength Jurisdiction Policy Filesmust be obtained and installed in the JDK/JRE. Be aware that these files mightalready exist in your installation. If so, they must be updated.Kerberos PrincipalA Kerberos Principal represents a unique identity in a Kerberos system to whichKerberos can assign tickets to access Kerberos-aware services. A service principalshould be created for each Storage Node. Oracle NoSQL Database service principalsfollow this naming format: <service_name>/instance@REALM.where:\xe2\x80\xa2 service_nameIs a case-sensitive string that represents the Oracle NoSQL Database service.The default value is oraclenosql.All Oracle NoSQL Database service principals should use the same service nameacross different Storage Nodes.\xe2\x80\xa2 instanceRepresents the service principal instance name. It is recommended to use the fullyqualified domain name (FQDN) of the Storage Node where Oracle NoSQLDatabase is running.If instance is not specified, the default principal will be created asoraclenosql@REALM.\xe2\x80\xa2 REALM4-1Chapter 4KeytabsRepresents the Kerberos realm name where the database service is registered. Itmust be specified in UPPERCASE and is typically the DNS domain name.If no realm is given, the service principal is assumed to belong to the defaultrealm, as configured in the Kerberos configuration file.KeytabsA keytab is a file containing pairs of Kerberos principals and an encrypted copy of thatprincipal\'s key.Keytabs are used to authenticate a principal on a host to Kerberos.Note:Because having access to the keytab file for a principal allows one to act asthat principal, access to the keytab files should be tightly secured.Kadmin and kadmin.localKadmin and kadmin.local are command-line interfaces to the Kerberos administrationsystem.In general, both interfaces provide the same functionality. When creating Kerberosprincipals and keytabs, you can use kadmin.local or kadmin depending on youraccess and account.For more information, see the MIT Kerberos documentation.Kerberos Security PropertiesTo set up the Kerberos security properties, you can set them in a login file or throughthe KVStoreConfig class.The minimal configuration needed to set up Kerberos includes the following properties:\xe2\x80\xa2 oracle.kv.auth.usernameSpecifies the Kerberos user name in Oracle NoSQL Database. It must match theprincipal name in KDC and match the Kerberos user account name created in thedatabase. The client will use the value of this option to create the credential whichis used in the client-server authentication. If the short name of principal is specifiedin this field, you must also specify oracle.kv.auth.kerberos.realm.If KerberosCredentials is not used, this field has to be specified in the login file orsecurity properties field of KVStoreConfig.\xe2\x80\xa2 oracle.kv.auth.kerberos.servicesSpecifies the Kerberos principals for services associated with each helper host.Setting this property is required if, as recommended, each host uses a differentprincipal that includes its own principal name. All principals should specify thesame service and realm. If this property is not set, the client will use oraclenosqlas the principal name for services on all helper hosts.4-2Chapter 4Kerberos Security PropertiesEach entry should specify the helper host name followed by the Kerberos servicename, and optionally an instance name and realm name. The entries areseparated by commas, ignoring spaces. If any entry does not specify a realm,each entry will use the default realm specified in Kerberos configuration file. If anyentry specifies a realm name, then all entries must specify the same one. Thesyntax is:host:service[:instance[@realm]][, host:service[:instance[@realm]]]* For example:host37:nosql/host37@EXAMPLE.COM, host53:nosql/host53@EXAMPLE.COM \xe2\x80\xa2 oracle.kv.auth.kerberos.keytabThe default location of the keytab file is specified by the Kerberos configurationfile. If the keytab is not specified there, then the system looks for the fileuser.home/krb5.keytab.\xe2\x80\xa2 oracle.kv.auth.kerberos.realmSpecifies the Kerberos realm for the user principal if using a short name to specifythe client login principal.\xe2\x80\xa2 oracle.kv.auth.kerberos.ccacheSpecifies the path of the Kerberos ticket cache. This field is optional. The defaultticket cache is "/tmp/krbcc_<uid>". If the credential cache is not found, the systemwill look for the file user.home/krb5cc_user.name. If you want to use your ownticket cache, set this field to the path of the ticket cache.\xe2\x80\xa2 oracle.kv.auth.kerberos.mutualAuthSpecifies whether the client should use mutual authentication. If this value is set totrue, the client will authenticate the server\'s identity in the login results.The default value is false, so mutual authentication is disabled.Setting Security Properties in a security login fileTo set the properties in a security file, specify the location of the login file by setting theoracle.kv.security Java system property. For example:java -Doracle.kv.security=kerberoslogin.txt HelloWorld where the file kerberoslogin.txt should be a copy of the client.security file withadditional properties settings for Kerberos authentication. The file would then containcontent like this:oracle.kv.auth.username=krbuser@EXAMPLE.COMoracle.kv.auth.external.mechanism=kerberosoracle.kv.auth.kerberos.keytab=/kerberos/krb5.keytaboracle.kv.auth.kerberos.services=                 node01:oraclenosql/node01.example.com@EXAMPLE.COMoracle.kv.auth.kerberos.mutualAuth=false 4-3Chapter 4Kerberos Security PropertiesYou can specify the location of the Kerberos configuration file by specifying thejava.security.krb5.conf Java system property. For example:java -Djava.security.krb5.conf=/kerberos/krb5.conf \\-Doracle.kv.security=kerberoslogin.txt HelloWorld You can also set the default realm using java.security.krb5.realm. To set thedefault KDC, use java.security.krb5.kdc.Note:Set the Java system properties for both the realm and the KDC or neither ofthem. These properties override the default realm and KDC values specifiedin the krb5.conf file.Setting Security Properties through KVStoreConfigYou can also set security properties using KVStoreConfig. For example:Properties securityProps = new Properties();securityProps.setProperty("oracle.kv.auth.username",                                            "krbuser@EXAMPLE.COM");securityProps.setProperty("oracle.kv.auth.external.mechanism",                                            "kerberos");securityProps.setProperty("oracle.kv.auth.kerberos.keytab",                                             "/kerberos/krb5.keytab");securityProps.setProperty("oracle.kv.auth.kerberos.services",                 "node01:oraclenosql/node01.example.com@EXAMPLE.COM");securityProps.setProperty("oracle.kv.auth.kerberos.ccache",                                               "/kerberos/krbcc_501");securityProps.setProperty("oracle.kv.auth.kerberos.mutualAuth",                                               "false");KVStoreConfig kvConfig = new KVStoreConfig("mystore", "node01:5000");kvConfig.setSecurityProperties(securityProps); Using Security Properties to Log InTo log in to Oracle NoSQL Database using security properties, you can use credentialcache, a keytab file or the principal password.Note:When connecting through the Admin CLI, if credential cache or keytabs loginattempts fail, Oracle NoSQL Database prompts for the principal\'s password.4-4Chapter 4Kerberos Security PropertiesUsing Credential CacheTo login to Oracle NoSQL Database using credential cache:1. Run the kinit  Kerberos tool to save the credential in the credential cache.For example, to authenticate the client principal krbuser@EXAMPLE.COM to KDC:kinit krbuser@EXAMPLE.COMPassword for krbuser@EXAMPLE.COM: ******** The granted ticket-granting ticket (TGT) will be saved in the default credentialcache for later authentication.2. You can also generate a separate cache. To do this run the following command:kinit krbuser@EXAMPLE.COM -c krbcc_krbuser3. Perform the login by specifying oracle.kv.auth.kerberos.ccache in a securitylogin file or through KVStoreConfig. In this case, a security login file is used:java -Xmx64m -Xms64m \\-Doracle.kv.security=mylogin.txt \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 -host localhostLogged in admin as krbuserThe file mylogin.txt should be a copy of the client.security file with additionalproperties settings for Kerberos authentication. The file would then contain contentlike this:oracle.kv.auth.kerberos.ccache=/kerberos/krbcc_krbuseroracle.kv.auth.username = krbuser@EXAMPLE.COM oracle.kv.auth.external.mechanism=kerberosoracle.kv.auth.kerberos.services=                 node01:oraclenosql/node01.example.com@EXAMPLE.COMoracle.kv.auth.kerberos.mutualAuth=falseIn this case, Oracle NoSQL Database reads the credential cache and logins toKerberos without needing a password.Using credential cacheTo login to Oracle NoSQL Database using credential cache:1. Run the kinit Kerberos tool to save the credential in the credential cache.For example, to authenticate the client principal krbuser@EXAMPLE.COM toKDC:kinit krbuser@EXAMPLE.COMPassword for krbuser@EXAMPLE.COM: ******** 4-5Chapter 4Kerberos Security PropertiesThe granted ticket-granting ticket (TGT) will be saved in the default credentialcache for later authentication.2. You can also generate a separate cache. To do this run the following command:kinit krbuser@EXAMPLE.COM -c krbcc_krbuser3. Perform the login by specifying oracle.kv.auth.kerberos.ccache in a securitylogin file or through KVStoreConfig. In this case, a security login file is used:java -Xmx64m -Xms64m \\-Doracle.kv.security=mylogin.txt \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 -host localhostLogged in admin as krbuserThe file mylogin.txt should be a copy of the client.security file with additionalproperties settings for Kerberos authentication. The file would then contain contentlike this:oracle.kv.auth.kerberos.ccache=/kerberos/krbcc_krbuseroracle.kv.auth.username = krbuser@EXAMPLE.COM oracle.kv.auth.external.mechanism=kerberosoracle.kv.auth.kerberos.services=                 node01:oraclenosql/node01.example.com@EXAMPLE.COMoracle.kv.auth.kerberos.mutualAuth=false In this case, Oracle NoSQL Database reads the credential cache and logins toKerberos without needing a password.Using a keytabTo login to Oracle NoSQL Database using a keytab:1. Run the kinit Kerberos tool to extract the keytab:kadmin.local:  ktadd -k /tmp/mykeytab krbuser@EXAMPLE.COMEntry for principal krbuser@EXAMPLE.COM added to keytab WRFILE:/tmp/mykeytab. 2. Copy the keytab file to any client machine that will use thekrbuser@EXAMPLE.COM principal to login automatically to Oracle NoSQLDatabase.3. Set the Kerberos security properties, including the keytab file location, on eachclient by specifying them in a security file or through the KVStoreConfig class.In this example, a security file (login) is used. To login, specify the keytab locationby using oracle.kv.auth.kerberos.keytab. You must also specify the usernameusing oracle.kv.auth.username. For example, the login file would then containcontent like this:oracle.kv.auth.kerberos.keytab = /kerberos/mykeytaboracle.kv.auth.username = krbuser@EXAMPLE.COMoracle.kv.auth.external.mechanism=kerberosoracle.kv.auth.kerberos.services=4-6Chapter 4JAAS programming framework integration                 node01:oraclenosql/node01.example.com@EXAMPLE.COMoracle.kv.auth.kerberos.mutualAuth=falseIn this case, Oracle NoSQL Database reads the keytab and logins to Kerberoswithout needing a password.For more information on Kerberos security properties, see Kerberos SecurityProperties.JAAS programming framework integrationOracle NoSQL Database allows client applications to integrate with programs usingthe Java Authentication and Authorization Service (JAAS) programming framework.Use the oracle.kv.jaas.login.conf.entryName security property to specify theJAAS login configuration.Note:If a JAAS login configuration file is set, you cannot specify keytab orcredential cache in security properties.A login configuration file would then contain content like this:oraclenosql {   com.sun.security.auth.module.Krb5LoginModule required   useKeyTab=true   keyTab=test.keytab   storeKey=true   principal=krbuser   doNotPrompt=false;}; where oraclenosql is the value for oracle.kv.jaas.login.conf.entryName. Thisconfiguration file can be used for Kerberos login.In the following example, assume the client application has already obtained theKerberos credentials for user krbuser before it tries to connect to Oracle NoSQLDatabase. You do not have to specify security properties in the login file. You canspecify the credentials using the Subject.doAs method:final LoginContext lc =    new LoginContext("oraclenosql", new TextCallbackHandler());// Attempt authenticationlc.login();// Get the authenticated Subjectfinal Subject subj = lc.getSubject();// Specify configuration4-7Chapter 4Performing a Secure Oracle NoSQL Database Installation with Kerberosfinal KVStoreConfig kvConfig =    new KVStoreConfig("mystore", "nosql1:5000");// Set security properties SSL neededfinal Properties securityProps = new Properties();securityProps.setProperty(KVSecurityConstants.TRANSPORT_PROPERTY,                          KVSecurityConstants.SSL_TRANSPORT_NAME);securityProps.setProperty(                 KVSecurityConstants.SSL_TRUSTSTORE_FILE_PROPERTY,                 trustStore);kvConfig.setSecurityProperties(securityProps);// Set Kerberos propertiesfinal Properties krbProperties = new Properties();// Set service principal associated with helper hostkrbProperties.setProperty(KVSecurityConstants.AUTH_KRB_SERVICES_PROPERTY,                          hostName + ":" + servicePrincipal);// Set default realm name, because the short name// for user principal is used.krbProperties.setProperty(KVSecurityConstants.AUTH_KRB_REALM_PROPERTY,                          "EXAMPLE.COM");// Specify Kerberos principalfinal KerberosCredentials krbCreds =    new KerberosCredentials("krbuser", krbProperties);// Get store using credentials in subjectKVStore kvstore = Subject.doAs(    subj, new PrivilegedExceptionAction<KVStore>() {        @Override        public KVStore run() throws Exception {            return KVStoreFactory.getStore(kvConfig, krbCreds, null);        }    });In this case, a KerberosCredentials instance is used to set the security propertiesneeded to retrieve the credentials of the specified user principal from KDC.Performing a Secure Oracle NoSQL Database Installationwith KerberosIt is possible to add Kerberos to a new or an existing Oracle NoSQL Database secureinstallation.At a high-level, to configure a Oracle NoSQL Database installation to use Kerberos,you first need to register Oracle NoSQL Database as a service principal in KDC andextract corresponding keytab files on each database server node. Then, to allow clientlogin, a user principal must be added in KDC and a mapped user account with thesame name of principal needs to be created in the database. Finally, login can beperformed through the CLI or the kvclient driver.4-8Chapter 4Performing a Secure Oracle NoSQL Database Installation with KerberosAdding Kerberos to a New InstallationTo install Oracle NoSQL Database with Kerberos authentication:Note:The following example assumes you have configured an admin/adminprincipal on the KDC and that you distributed its keytab (kadm5.keytab) tothe Oracle NoSQL Database Storage Nodes. For more information, see Configuring the Kerberos Administrative Utility.1. Run the makebootconfig utility with the -store-security configure and -external-auth kerberos flags to set up the basic store configuration withKerberos security:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 5000 \\-host node01 -harange 5010,5020 \\-capacity 3 \\-store-security configure \\-external-auth kerberos \\-instance-name node01.example.com \\-kadmin-keytab /kerberos/kadm5.keytab \\-admin-principal admin/admin 2. In this example, -store-security configure is used, so the securityconfiguration utility is run as part of the makebootconfig process and you areprompted for a password to use for your keystore file:Enter a password for the Java KeyStore: 3. Enter a password for your store and then reenter it for verification. In this case,Oracle Wallet is used. Oracle Wallet and Kerberos support are only available inthe Oracle NoSQL Database EE version.Enter a password for the Java KeyStore: ***********Re-enter the KeyStore password for verification: *********** 4. In this case, -kadmin-keytab points to the admin/admin keytab file you distributedearlier. Once authenticated, the configuration tool will automatically generate somesecurity related files:Login Kerberos admin via keytab /kerberos/kadm5.keytabAdding principal oraclenosql/node01.example.com@EXAMPLE.COMAuthenticating as principal admin/admin withkeytab /kerberos/kadm5.keytabExtracting keytab KVROOT/security/store.keytabCreated files:4-9Chapter 4Performing a Secure Oracle NoSQL Database Installation with Kerberossecurity/security.xmlsecurity/store.keyssecurity/store.trustsecurity/store.wallet/cwallet.sso security/store.keytabsecurity/client.security security/client.trust 5. In a multi-host store environment, the security directory and all files contained in itshould be copied from the first node to each server that will host a Storage Node,to setup internal cluster authentication. For example, the following commandsassume that the different nodes are visible and accessible on the current node(node01):cp -R node01/KVROOT/security node02/KVROOT/cp -R node01/KVROOT/security node03/KVROOT/Note:You may need to use a remote copying command, like Secure CopyProtocol (SCP), to do the copying if the files for the different nodes arenot visible on the current node.6. Run makebootconfig on the other two nodes:\xe2\x80\xa2 Add Kerberos and create their individual service principal and keytab:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 6000 \\ -host node02 -harange 6010,6020 \\-capacity 3 \\-store-security configure \\-external-auth kerberos \\-instance-name node02.example.com \\-kadmin-keytab /kerberos/kadm5.keytab \\-admin-principal admin/admin java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 7000 \\-host node03 -harange 7010,7020 \\-capacity 3 \\-store-security configure \\-external-auth kerberos \\-instance-name node03.example.com \\-kadmin-keytab /kerberos/kadm5.keytab \\-admin-principal admin/admin4-10Chapter 4Performing a Secure Oracle NoSQL Database Installation with KerberosNote:The service principal name of node2 and node3 are using the sameservice name "oraclenosql", but different instance names. Theirkeytab files are different, which contains the key for principal"oraclenosql/node2.example.com" and "oraclenosql/node3.example.com" respectively.\xe2\x80\xa2 To enable Kerberos authentication if the store is using the same serviceprincipal on every node:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 6000 \\-host node02 -harange 6010,6020 \\-capacity 3 \\-store-security enablejava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 6000 \\-host node03 -harange 6010,6020 \\-capacity 3 \\-store-security enableNote:The service principal created in step one is "oraclenosql/node01.example.com". The instance name can be replaced with anymore general one like "nosql". In above example, node02 andnode03 are all using the same service principal and keytab filewithout creating new one individually.7. Start the Storage Node Agent (SNA) on each node:Note:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.nohup java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar start -root KVROOT&When a newly created store with a secure configuration is first started, there areno user definitions available against which to authenticate access. In order to4-11Chapter 4Performing a Secure Oracle NoSQL Database Installation with Kerberosreduce risk of unauthorized access, an admin will only allow you to connect to itfrom the host on which it is running. This security measure is not a completesafeguard against unauthorized access. It is important that you do not providelocal access to machines running KVStore. In addition, you should perform thefollowing steps soon after this step in order to minimize the time period in whichthe admin might be accessible without full authentication. For more information onmaintaining a secure store see Guidelines for Securing the Configuration.8. Start runadmin in security mode on the KVStore server host (node01). To do this,use the following command:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar \\runadmin -port 5000 -host node01 \\-security KVROOT/security/client.securityLogged in admin as anonymous 9. Use the configure -name command to specify the name of the KVStore that youwant to configure:kv-> configure -name mystoreStore configured: mystore 10. Register the user principal on the KDC. To do this, use kadmin or kadmin.local:kadmin.local: addprinc  krbuser@EXAMPLE.COMEnter password for principal: "krbuser@EXAMPLE.COM": ***********Re-enter password for principal: "krbuser@EXAMPLE.COM": ********** 11. After user principal is registered on KDC, create the user in Oracle NoSQLDatabase. The username needs to match the full principal name in the KDC(includes realm name). In this case, user krbuser is defined:kv-> execute \'CREATE USER "krbuser@EXAMPLE.COM" IDENTIFIED EXTERNALLY\' For more information on user creation and administration, see User Management.12. At this point, it is possible to connect to the store as the krbuser. To login, you canuse credential cache, a keytab file or enter the principal password.In this example, a keytab file is used. To do this, first extract the keytab of principalkrbuser@EXAMPLE.COM on the KDC host by using kadmin.local.kadmin.local:  ktadd -k /tmp/mykeytab  krbuser@EXAMPLE.COMEntry for principal krbuser@EXAMPLE.COM added to keytab WRFILE:/tmp/mykeytab. 13. Copy the keytab file to client machines that will use the krbuser@EXAMPLE.COMprincipal to login automatically to Oracle NoSQL Database.14. Set the Kerberos security properties, including the keytab file location, on eachclient by specifying them in a security file or through the KVStoreConfig class.4-12Chapter 4Performing a Secure Oracle NoSQL Database Installation with KerberosIn this example, a security file (mylogin.txt) is used. To login, specify the filelocation by using the oracle.kv.security property. For example:java -Xmx64m -Xms64m \\-Doracle.kv.security=mylogin.txt \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 -host localhostLogged in admin as krbuserThe file mylogin.txt should be a copy of the client.security file with additionalproperties settings for Kerberos authentication. The file would then contain contentlike this:oracle.kv.auth.kerberos.keytab = kerberos/mykeytaboracle.kv.auth.username = krbuser@EXAMPLE.COM oracle.kv.auth.external.mechanism=kerberosoracle.kv.auth.kerberos.services=                 node01:oraclenosql/node01.example.com@EXAMPLE.COMoracle.kv.auth.kerberos.mutualAuth=false In this case, Oracle NoSQL Database reads the keytab and logins to Kerberoswithout needing a password.For more information on Kerberos security properties, see Kerberos SecurityProperties.Adding Kerberos to an Existing Secure InstallationTo add Kerberos to an existing Oracle NoSQL Database secure installation:Note:The following example assumes you have configured an admin/adminprincipal on the KDC and that you distributed its keytab (kadm5.keytab) tothe Oracle NoSQL Database Storage Nodes. For more information, see Configuring the Kerberos Administrative Utility.Note:If your Kerberos installation/keytab will be configured to use a strongencryption type \xe2\x80\x94 for example, AES with 256-bit keys \xe2\x80\x94 the JCE UnlimitedStrength Jurisdiction Policy Files must be obtained and installed in the JDK/JRE. Be aware that these files might already exist in your installation. If so,they must be updated.4-13Chapter 4Performing a Secure Oracle NoSQL Database Installation with Kerberos1. Shut down the KVStore instance:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar stop \\-root KVROOT2. Use the config add-kerberos command to add Kerberos authentication:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig \\config add-kerberos -root KVROOT \\-secdir security \\-admin-principal admin/adminAdding principal oraclenosql@EXAMPLE.COMPassword for admin/admin: *******Created files:   security/store.keytabUpdated Kerberos configuration Note:When running this command, the securityconfig tool will verify theexistence of the referenced files and will update the specified bootstrapconfiguration file to refer to the security configuration. This process isnormally done with the KVStore instance stopped, and must beperformed on each Storage Node of the store.3. Start the Storage Node Agent (SNA) on each node:Note:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.nohup java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar start -root KVROOT&4. Start runadmin in security mode on the KVStore server host (node01). To do this,use the following command:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar \\runadmin -port 5000 -host node01 \\-security KVROOT/security/client.security Logged in admin as anonymous.4-14Chapter 4Performing a Secure Oracle NoSQL Database Installation with KerberosThis command sets SSL as a connection method and names a copy of thegenerated truststore file (client.security). For more information on SSL properties,see SSL communication properties.5. Register the user principal on the KDC. To do this, use kadmin or kadmin.local:kadmin.local: addprinc  krbuser@EXAMPLE.COMEnter password for principal: "krbuser@EXAMPLE.COM": ***********Re-enter password for principal: "krbuser@EXAMPLE.COM": ********** 6. After user principal is registered on KDC, create the user in Oracle NoSQLDatabase. The username needs to match the full principal name in the KDC(includes realm name). In this case, user krbuser is defined:kv-> execute \'CREATE USER "krbuser@EXAMPLE.COM" IDENTIFIED EXTERNALLY\' For more information on user creation and administration, see User Management.7. At this point, it is possible to connect to the store as the krbuser. To login, you canuse credential cache, a keytab file or enter the principal password.In this example, a keytab file is used. To do this, first extract the keytab of principalkrbuser@EXAMPLE.COM on the KDC host by using kadmin.local.kadmin.local:  ktadd -k /tmp/mykeytab  krbuser@EXAMPLE.COMEntry for principal krbuser@EXAMPLE.COM added to keytab WRFILE:/tmp/mykeytab. 8. Copy the keytab file to any client machine that will use thekrbuser@EXAMPLE.COM principal to login automatically to Oracle NoSQLDatabase.9. Set the Kerberos security properties, including the keytab file location, on eachclient by specifying them in a security file or through the KVStoreConfig class.In this example, a security file (mylogin.txt) is used. To login, specify the filelocation by using the oracle.kv.security property. For example:java -Xmx64m -Xms64m \\-Doracle.kv.security=mylogin.txt \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 -host localhostLogged in admin as krbuserThe file mylogin.txt should be a copy of the client.security file with additionalproperties settings for Kerberos authentication. The file would then contain contentlike this:oracle.kv.auth.kerberos.keytab = kerberos/mykeytaboracle.kv.auth.username = krbuser@EXAMPLE.COM oracle.kv.auth.external.mechanism=kerberosoracle.kv.auth.kerberos.services=                 node01:oraclenosql/node01.example.com@EXAMPLE.COMoracle.kv.auth.kerberos.mutualAuth=false 4-15Chapter 4Using Oracle NoSQL Database with Kerberos and Microsoft Active Directory (AD)In this case, Oracle NoSQL Database reads the keytab and logins to Kerberoswithout needing a password.For more information on Kerberos security properties, see Kerberos SecurityProperties.Using Oracle NoSQL Database with Kerberos and MicrosoftActive Directory (AD)To use Oracle NoSQL Database with Kerberos and Microsoft Active Directory:1. Update Kerberos Configuration krb5.conf with AD.The Microsoft Guide (see here) details how to update the Kerberos configurationfile on a Unix host in step 3: Edit the file (/etc/krb5.conf) to refer to the Windows2000 domain controller as the Kerberos KDC. After changing the Kerberosconfiguration file, run kinit using a user account in AD to verify that theconfiguration is correct.For example, suppose you have user account krbuser08 on domain TEST08 of AD,and the KDC realm name is TEST08.LOCAL:$ kinit krbuser08@TEST08.LOCALPassword for krbuser08@TEST08.LOCALAfter you provide the password, the command should return without error. An errorindicates there are probably configuration issues. If the kinit command ransuccessfully, then run klist to check that the ticket cache contains the TGT ofkrbuser08.$ klistTicket cache: FILE:/tmp/krb5cc_500Default principal: krbuser08@TEST08.LOCALValid starting     Expires            Service principal08/12/16 11:45:03  08/12/16 21:45:11 krbtgt/TEST08.LOCAL@TEST08.LOCAL       renew until 08/19/16 11:45:03The klist shows the tickets in your ticket cache. Perform this step to check if theticket-granting ticket has been properly obtained using the principal krbuser08described by "Default Principal." The "Service Principal" describes each ticket, theticket-granting ticket has the primary krbtgt, and the instance name is the KDCrealm name. Also check if the lifetime indicated by "Valid Starting" and "Expires" iscorrect.2. Create service instance account and generate keytab on AD.The Microsoft Guide (see https://technet.microsoft.com/en-us/library/bb742433.aspx#EEAA) details how to support a service running on a Unix systemwhen using Active Directory. Follow the steps in this document to generate theservice principal and keytab file for Oracle NoSQL Database. Note that you do notneed to perform step 3 in the Microsoft Guide to merge keytab files if you plan touse same keytab file on every host.4-16Chapter 4Using Oracle NoSQL Database with Kerberos and Microsoft Active Directory (AD)For example, you can set the instance name to nosql and use this keytab onevery node.\xe2\x80\xa2 Use the Active Directory Management tool to create a user account namedoraclenosql.In the user creation interface, you can choose which Kerberos encryption typethis account can support. The user account may use Data EncryptionStandard (DES) encryption as default. To enable other encryption types forthis account, you need to manually configure in the "Properties" interface, orby using ktpass utility. Note that you need to disable the "User must changepassword at next logon" setting.\xe2\x80\xa2 Use ktpass tool on Windows Server to set up an identity mapping.c:\\ktpass -princ oraclenosql/nosql@TEST08.LOCAL -mapuser oraclenosql -pass "*"-cypto DES-CBC-MD5 -ptype KRB5_NT_PRINCIPAL -out c:\\store.keytabYou may need to add allow_weak_crypto = true to the krb5.conf file on theUnix host, as well as default_tkt_enctypes and default_tgs_enctypes, ifyou use the DES decryption type. The default name of the keytab for OracleNoSQL Database is store.keytab and the default service name of the serviceprincipal is oraclenosql.\xe2\x80\xa2 Copy the keytab file to your Unix hosts used by Oracle NoSQL Database.Typically, you can use Secure Copy Protocol (scp) or PuTTY Secure Copy(PSCP) to transfer this file securely, or upload this file to an FTP server sharedby Windows Server and Unix hosts. After creating the service principal andkeytab, run kinit tests on your Unix hosts (described next) to confirm that theyare configured properly.3. Test if the user account can acquire service tickets for the service principal, and ifthe service keytab is generated correctly by running kinit:\xe2\x80\xa2 Test if the user account can acquire service tickets for service principaloraclenosql.$ kinit -S oraclenosql/nosql@TEST08.LOCAL krbuser08@TEST08.LOCALPassword for krbuser08@TEST08.LOCAL:$ klistTicket cache: FILE:/tmp/krb5cc_500Default principal: krbuser08@TEST08.LOCALValid starting     Expires            Service principal08/12/16 11:50:55  08/12/16 21:51:00  oraclenosql/nosql@TEST08.LOCAL       renew until 08/19/16 11:50:55If the ticket cache does not contains a service ticket for oraclenosql/nosql, orif any errors are reported in the first command, then check if the account wascreated properly.4-17Chapter 4Using Oracle NoSQL Database with Kerberos and Microsoft Active Directory (AD)\xe2\x80\xa2 Test if the service keytab was generated correctly by running kinitoraclenosql.$ kinit -k -t store.keytab oraclenosql/nosql@TEST08.LOCAL$ klistTicket cache: FILE:/tmp/krb5cc_500Default principal: oraclenosql/nosql@TEST08.LOCALValid starting     Expires            Service principal08/12/16 11:51:44  08/12/16 21:51:45 krbtgt/TEST08.LOCAL@TEST08.LOCAL       renew until 08/19/16 11:51:44As with the previous tests, any errors need to be fixed before attempting toconfigure Oracle NoSQL Database. Some versions of the kinit utility may needto explicitly specify default_tkt_enctypes and default_tgs_enctypes withthe encryption type you configured for the service account oraclenosql inActive Directory, otherwise kinit cannot successfully obtain tickets from AD.4. Begin to configure Oracle NoSQL Database.Oracle NoSQL Database utilizes the Unix kadmin tool to help users create serviceprincipal and generate keytab file. However, AD does not have remote adminutility support, so it is necessary to skip this step in AD Kerberos environment.For Oracle NoSQL Database releases prior to 4.2, you must specify none as thevalue for both the -kadmin-path and -admin-principal makebootconfigcommand line options.java -Xmx64m -Xms64m \\-jar $KVHOME/lib/kvstore.jar makebootconfig -root kvroot \\-port 5000 \\-host node01.example.com -harange 5010,5020 \\-store-security configure -kspwd password \\-external-auth kerberos \\-kadmin-path none \\-admin-principal none \\-instance-name nosqlAdding principal oraclenosql/nosqlIO error encountered: Cannot run program "none": error=13,Permission deniedCreated files   KVROOT/security/client.security   KVROOT/security/client.trust   KVROOT/security/security.xml   KVROOT/security/store.wallet/cwallet.sso   KVROOT/security/store.keys   KVROOT/security/store.trustThe IO error can be ignored in this example, because we did not specify a correctkadmin path.4-18Chapter 4Using Oracle NoSQL Database with Kerberos and Microsoft Active Directory (AD)For Oracle NoSQL Database 4.2 and later releases, you only need to specify noneas the value for the -kadmin-path flag:java -Xmx64m -Xms64m \\-jar $KVHOME/lib/kvstore.jar makebootconfig -root kvroot \\-port 5000 \\-host node01.example.com -harange 5010,5020 \\-store-security configure -kspwd password \\-external-auth kerberos \\-kadmin-path none \\-instance-name nosqlThe kadmin path was specified as NONE, so this example is not creating a keytabfor the database server. The keytab must be generated and copied to the securityconfiguration directory manually.Created files   KVROOT/security/client.security   KVROOT/security/client.trust   KVROOT/security/security.xml   KVROOT/security/store.wallet/cwallet.sso   KVROOT/security/store.keys   KVROOT/security/store.trustAfter the security directory is created, it is worth checking that the Kerberosparameters are configured as expected.Check security.xml in kvroot/security and look for the following parameters:\xe2\x80\xa2 krbInstanceName\xe2\x80\xa2 krbRealmNameFor Oracle NoSQL Database 4.2 and later releases, you can use thesecurityconfig tool to view the parameters:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar securityconfig \\config show -secdir kvroot/security...krbInstanceName=nosqlkrbRealmName=TEST08.LOCAL5. Manage service principals in a multi-node environment.\xe2\x80\xa2 In a multi-node environment, if you want to use a single service principaloraclenosql/nosql for all nodes, you can simply copy the contents of the firstsecurity directory to the other nodes. For example, the following commandsassume that the different nodes are visible and accessible on the current node(node01):cp -R node01/KVROOT/security node02/KVROOT/cp -R node01/KVROOT/security node03/KVROOT/4-19Chapter 4Using Oracle NoSQL Database with Kerberos and Microsoft Active Directory (AD)You may need to use a remote copying command, like scp, to do the copyingif the files for the different nodes are not visible on the current node.Run makebootconfig on the other two nodes to enable Kerberosauthentication.java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 5000 \\-host node02 -harange 5010,5020 \\-store-security enablejava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 5000 \\-host node03 -harange 5010,5020 \\-store-security enableNote:The service principal for node02 and node03 will be configured asoraclenosql/nosql@TEST08.LOCAL. Also they will use the samekeytab file generated in step two.\xe2\x80\xa2 To set up individual service principals for each node, run step two to create aservice account on AD and generate a new keytab for each node. Forexample, each node uses host name as instance name of service principaland their corresponding keytab files.oracelnosql/node01@TEST08.LOCALoracelnosql/node02@TEST08.LOCALoracelnosql/node03@TEST08.LOCALCopy the security directory created on node01 to other nodes. For example,the following commands assume that the different nodes are accessible usingssh from the current node (host01):cp -R node01/KVROOT/security node02/KVROOT/cp -R node01/KVROOT/security node03/KVROOT/Note:You may need to use a remote copying command, like scp, to copythe files for the different nodes if they are not visible on the currentnode.4-20Chapter 4Using Oracle NoSQL Database with Kerberos and Microsoft Active Directory (AD)Replace keytab files of node2 and node3 generated in step two with the one intheir security configuration directory. For example:cp store.keytab node02/KVROOT/securitycp store.keytab node03/KVROOT/securityNote:The name of all of the keytab files generated in step two isstore.keytab by default. Make sure that you have given each nodethe proper keytab file. Use the klist tool to check keytab file oneach node to make sure they contain the correct key of serviceprincipal for the node.Run the securityconfig tool on node02 and node03 to modify instance nameof security configuration:security -> config update -secdir KVROOT/security \\-param krbInstanceName=node02security -> config update -secdir KVROOT/security \\-param krbInstanceName=node03Run makebootconfig on the other two nodes to enable Kerberosauthentication.java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 5000 \\-host node02 -harange 5010,5020 \\-store-security enablejava -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar makebootconfig \\-root KVROOT -port 5000 \\-host node03 -harange 5010,5020 \\-store-security enable6. Start the Storage Node Agent (SNA) on each node:4-21Chapter 4Using Oracle NoSQL Database with Kerberos and Microsoft Active Directory (AD)Note:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.nohup java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar start -root KVROOT&When a newly created store with a secure configuration is first started, there areno user definitions available against which to authenticate access. To reduce riskof unauthorized access, an admin will only allow you to connect to it from the hoston which it is running. This security measure is not a complete safeguard againstunauthorized access. It is important that you do not provide local access tomachines running KVStore. In addition, perform the following steps to minimize thetime period in which the admin might be accessible without full authentication. Formore information on maintaining a secure store see Guidelines for Securing theConfiguration.7. Start runadmin in security mode on the KVStore server host (node01). To do this:java -Xmx64m -Xms64m \\-jar KVHOME/lib/kvstore.jar \\runadmin -port 5000 -host node01 \\-security KVROOT/security/client.securityLogged in admin as anonymous8. Use the configure -name command to specify the name of the KVStore that youwant to configure, and then complete store deployment. For more information, seethe Oracle NoSQL Database Administrator\'s Guide:kv-> configure -name mystoreStore configured: mystore... 9. Create a user account on Microsoft Active Directory. In this example, krbuser iscreated on Active Directory.10. Create mapping user in Oracle NoSQL Database. The username needs to matchthe full principal name in the KDC (includes realm name). In this case, userkrbuser is defined:kv-> execute \'CREATE USER "krbuser@TEST08.LOCAL" IDENTIFIED EXTERNALLY\' For more information on user creation and administration, see User Management.11. At this point, it is possible to connect to the store as the krbuser. To login, you canuse credential cache, a keytab file or enter the principal password.12. Set the Kerberos security properties, including the keytab file location, on eachclient by specifying them in a security file or through the KVStoreConfig class.4-22Chapter 4Using Oracle NoSQL Database with Kerberos and Microsoft Active Directory (AD)In this example, a security file (mylogin.txt) is used. To login, specify the filelocation by using the oracle.kv.security property. For example:java -Xmx64m -Xms64m \\-Doracle.kv.security=mylogin.txt \\-jar KVHOME/lib/kvstore.jar runadmin -port 5000 -host localhostkrbuser@TEST08.LOCAL\'s kerberos password:Logged in admin as krbuser@TEST08.LOCALkv-> The file mylogin.txt should be a copy of the client.security file with additionalproperties settings for Kerberos authentication. The file would then contain contentlike this:oracle.kv.auth.username = krbuser@TEST08.LOCAL oracle.kv.auth.external.mechanism=kerberosoracle.kv.auth.kerberos.services=node01:oraclenosql/nosql@TEST08.LOCALoracle.kv.transport=ssloracle.kv.ssl.trustStore=KVROOT/security/client.trustoracle.kv.ssl.protocols=TLSv1.2,TLSv1.1,TLSv1oracle.kv.ssl.hostnameVerifier=dnmatch(CN\\=NoSQL)In this example, the store nodes are using the single service principaloraclenosql/nosql. Without specifying keytab or credential cache, Admin CLIprompts for principal password.For more information on Kerberos security properties, see Kerberos SecurityProperties.4-235External Password StorageDepending on the type of store deployment, there are two ways passwords can beexternally stored. For Enterprise Edition (EE) deployments, Oracle Wallet is used. ForCommunity Edition (CE) deployments, a simple read protected clear-text password fileis used.In the most basic mode of operation, external passwords are used only by the serverto track the keystore password. User passwords, which are stored securely within thedatabase, can also be supplied during client authentication.When a password store is used as a component of a login file, the alias that is used forthe password store type should be the username to which the password applies. Forexample, for a user named root, the password should be stored under the alias root.When a password store is used as part of the server, the alias keystore is used. Theuser password store should be a completely different file than the one in the securitydirectory located under KVROOT.Oracle WalletThe following commands provide functionality to manipulate Oracle wallet stores withinthe securityconfig tool. These commands are available in EE only. For moreinformation on the securityconfig tool, see Configuring Security with Securityconfig.To create a new auto-login wallet, run the wallet create command:wallet create -dir <wallet directory> Auto-login wallets store passwords in an obfuscated state. Access to the wallet issecured against reading by unauthorized users using the OS-level login.To manipulate secrets (passwords), which are associated with a name (alias), run thewallet secret command:wallet secret -dir <wallet directory> {-set | -delete} -alias <alias>If the -set option is specified, the user is prompted for a new password for the specifiedalias and required to verify the new secret.If the -delete option is specified, the secret is deleted from the store.Special considerations should be taken if Oracle wallet is used and you are deployingyour Oracle NoSQL Database. For more information, see Guidelines for DeployingSecure Applications.5-1Chapter 5Password store filePassword store fileThe following commands are used to create and manipulate CE password store fileswithin the securityconfig tool. CE password store files managed though thisinterface are never password protected. For more information on the securityconfigtool, see Configuring Security with Securityconfig.To create a new password store file, run the pwdfile create command:pwdfile create -file <password store file> To manipulate secrets (passwords), which are associated with a name (alias), run thepwdfile secret command:pwdfile secret -file <password store file> {-set | -delete} -alias <alias>If the user specifies the -set option, the user is prompted for a new password for thespecified alias and required to verify the new password.If the -delete option is specified, the alias is deleted from the store.5-26Security.xml ParametersThis chapter describes the parameters that can be set in the security.xmlconfiguration file. This file is generated by makebootconfig or securityconfig andtells the Oracle NoSQL Database server how to apply security.The security.xml file specifies parameters that primarily control networkcommunications. It contains top-level parameters, plus nested transport parameters. Atransport is a grouping of parameter settings that are specific to a particular type ofnetwork connection.Note:A subset of all the configuration options listed below related to SSL can bespecified through Java system properties, security file properties, or throughthe KVStoreConfig API. For more information, see SSL communicationproperties.Top-level parametersThe following top-level parameters can be set to the security.xml file:\xe2\x80\xa2 internalAuthSpecifies how internal systems authenticate. This parameter must be set to SSL.\xe2\x80\xa2 keystoreIdentifies the keystore file within the security directory. This parameter is normallyset to store.keys.\xe2\x80\xa2 keystoreTypeIdentifies the type of keystore that the keystore property references. If not set, theJKS keystore type is used by default.\xe2\x80\xa2 securityEnabledTo enable security this parameter must be set to true.\xe2\x80\xa2 certModeSpecifies the key/certificate management model in use. This must be set to"shared".\xe2\x80\xa2 truststoreIdentifies the truststore file within the security directory. This is normally set tostore.trust.\xe2\x80\xa2 truststoreType6-1Chapter 6Transport parametersIdentifies the type of keystore that the truststore property references. If not set, theJKS keystore type is used by default.\xe2\x80\xa2 walletDirIdentifies a directory within the security directory that contains a wallet passwordstore, which in turn holds the password for the keystore.\xe2\x80\xa2 passwordFileIdentifies a file within the security directory that contains a file password store,which in turn holds the password for the keystore.\xe2\x80\xa2 krbServiceNameSpecifies the service name of the Oracle NoSQL Database Kerberos serviceprincipal.\xe2\x80\xa2 krbInstanceNameSpecifies the service principal instance name.\xe2\x80\xa2 krbServiceKeytabSpecifies the keytab file name in the security directory that contains the KVStoreserver service principal and encrypted copy of principal\xe2\x80\x99s key.\xe2\x80\xa2 krbConfSpecifies the location of the Kerberos configuration file that contains the defaultrealm and KDC information. If not specified, the default value is /etc/krb5.conf.\xe2\x80\xa2 krbRealmNameSpecifies the realm name of service principal. If not specified, this value isacquired from the Kerberos configuration file.\xe2\x80\xa2 userExternalAuthSpecifies and enables the external mechanism used for authentication. Kerberosis supported. Set the value to KERBEROS to enable Kerberos authentication. Toremove Kerberos authentication from a running store, set the value to NONE.Transport parametersThere are three standard transport types:\xe2\x80\xa2 haControls the communications between the data replication layer.\xe2\x80\xa2 clientControls most RMI communication.\xe2\x80\xa2 internalControls the SSL internal authentication mechanism.The following parameters can be set and associated to a transport type:\xe2\x80\xa2 transportTypeThis parameter should be set to SSL.\xe2\x80\xa2 serverKeyAlias6-2Chapter 6Transport parametersThe keystore alias that identifies the keypair used by the server end of aconnection.\xe2\x80\xa2 clientKeyAliasThe keystore alias that identifies the keypair used by the client end of aconnection.\xe2\x80\xa2 clientAuthRequiredShould always be true for ha and internal transports and should be false for clienttransports.\xe2\x80\xa2 clientIdentityAllowedWhen clientAuthRequired is true, this specifies what client identification checkshould be applied. This should be set to dnmatch(XXX) where XXX is theDistinguished name from the client certificate.\xe2\x80\xa2 serverIdentityAllowedThis specifies what server verification should be performed. This should normallybe set to dnmatch(XXX) where XXX is the Distinguished name from the servercertificate.\xe2\x80\xa2 allowCipherSuitesThis is a comma-delimited list of SSL/TLS cipher suites that should be consideredfor use. For valid options, see the Java JSSE documentation corresponding toyour JDK version. If not specified, the JDK default set of cipher suites is allowed.\xe2\x80\xa2 allowProtocolsThis is a comma-delimited list of SSL/TLS protocols that should be considered foruse. For valid options, see the Java JSSE documentation corresponding to yourJDK version. If not specified, the JDK default set of protocols is used.\xe2\x80\xa2 clientAllowCipherSuitesSee allowCipherSuites for a description of the format. This parameter sets thecipher suite requirements only for the initiating side of a connection. If set, itoverrides any setting of allowCipherSuites for the connection initiator.\xe2\x80\xa2 clientAllowProtocolsSee allowProtocols for a description of the format. This parameter sets theprotocol requirements only for the initiating side of a connection. If set, it overridesany setting of allowProtocols for the connection initiator.6-37EncryptionNetwork data encryption provides data privacy so that unauthorized parties are unableto view plain text data during transmission across the network.Oracle NoSQL Database uses SSL-based encryption to encrypt network trafficbetween applications and the server, command line-utilities and the server, as well asbetween server components.Note:JMX access requires the use of SSL.SSL modelOracle NoSQL Database uses a simple SSL key management strategy. A single,shared, RSA key is used to protect communication. In this shared key model, youmust be sure that there is a master copy of the security directory and that it getscopied to each server. You should not run makebootconfig with the -store-securityconfigure option on all servers. Most servers should have the -store-securityenable option specified in their makebootconfig command.The shared key has an associated self-signed certificate with a Subject DistinguishedName that is not server-specific. The automatically-created certificates are generatedwith the Distinguished Name: CN=NoSQL.Each server component listens on SSL interfaces and presents the shared certificateto clients and other servers that connect to it, as proof of its authenticity. Each clientand server component uses a Java truststore containing a copy of the sharedcertificate to validate the certificate presented by servers.When accessing a NoSQL instance that is secured using SSL/TLS, you must specifyat least the following information:1. You must specify that the client will connect using SSL. This is done by setting thesecurity property oracle.kv.transport to "ssl".2. You must specify the Java truststore file that is used to validate the servercertificate. This is done by setting the security property oracle.kv.ssl.trustStore.For example, to start runadmin in security mode use the following command:java -Xmx64m -Xms64m \\-Doracle.kv.security=mylogin.txt \\-jar KVHOME/lib/kvstore.jar runadmin  7-1Chapter 7SSL communication propertieswhere the file mylogin.txt should be a copy of the client.security file with additionalproperties settings for authentication. The file would then contain content like this:oracle.kv.auth.username=rootoracle.kv.auth.wallet.dir=login.walletoracle.kv.transport=ssloracle.kv.ssl.trustStore=client.trustoracle.kv.ssl.protocols=TLSv1.2,TLSv1.1,TLSv1oracle.kv.ssl.hostnameVerifier=dnmatch(CN\\=NoSQL) Note:If you fail to correctly specify the oracle.kv.transport property or thetruststore, the client will fail to connect to the server.SSL communication propertiesAssuming that the NoSQL server is secured by SSL, client connections from OracleNoSQL Database administrative clients will need to connect over SSL as well. Thiscan be achieved by providing security properties for the connection.For Oracle-provided command line tools, a security file must be specified. The securityconfiguration process automatically generates a basic security file (client.security)that can be used to connect to the store. You may wish to make a copy of this andmodify it to include additional configuration properties.The minimal configuration needed to connect to a secure store includes setting thefollowing properties:\xe2\x80\xa2 oracle.kv.transport=sslDirects KVStore clients and utilities to connect to the KVStore RMI registry viaSSL.\xe2\x80\xa2 oracle.kv.ssl.trustStore=<path-to-ssl-truststore>Names a copy of the truststore file generated by makebootconfig orsecurityconfig to enable validation of the KVStore server SSL certificate.Note:You can use SSL to communicate an application with other SSL serverswithout using truststore-based certification validation.In addition to the two properties listed above, the following properties are alsosupported for control of SSL communications:\xe2\x80\xa2 oracle.kv.ssl.ciphersuitesSpecifies a comma-separated list of SSL cipher suites that should be allowed incommunication with the server.\xe2\x80\xa2 oracle.kv.ssl.protocols7-2Chapter 7Disk Encryption in a Linux EnvironmentSpecifies a comma-separated list of SSL protocols that should be allowed incommunication with the server.\xe2\x80\xa2 oracle.kv.ssl.trustStoreTypeSpecifies the type of truststore being used. If not specified, the default type for theJava runtime is used.Note:Applications may also set these security properties through API methodson KVStoreConfig.Disk Encryption in a Linux EnvironmentIf you are using the Linux operating system, you can secure your data by configuringdisk encryption to encrypt whole disks (including removable media), partitions,software RAID volumes, logical volumes, as well as your NoSQL files.dm-crypt is the Linux kernel\'s device mapper crypto target which provides transparentdisk encryption subsystem in the Linux kernel using the kernel crypto API.Cryptsetup is the command line tool to interface with dm-crypt for creating, accessingand managing encrypted devices. The most commonly used encryption is Cryptsetupfor the Linux Unified Key Setup (LUKS) extension, which stores all of the neededsetup information for dm-crypt on the disk itself and abstracts partition and keymanagement in an attempt to improve ease of use.This topic demonstrates how to convert a normal disk to a dm-crypt enabled disk andvice versa using the command-line interface.Assume that you have the following disks in your Linux system. The df -h commanddisplays the amount of available disk space for each disk.$df -h/dev/nvme0n1 2.9T 76G 2.7T 3% /ons/nvme0n1/dev/nvme1n1 2.9T 76G 2.7T 3% /ons/nvme1n1...If you nominate disk /dev/nvme0n1 to store databases, then you should encrypt thisdisk to secure the data within it.Normal disk to a dm-crypt enabled disk:Execute the following commands to convert a normal disk to a dm-crypt enabled disk:1. Unmount the file system on the disk.sudo umount -l /dev/nvme0n1 2. Generate the key to be used by luksFormat.sudo dd if=/dev/urandom of=/home/opc/key0.key bs=1 count=40967-3Chapter 7Disk Encryption in a Linux Environment3. Initialize a LUKS partition and set the initial key.sudo /usr/sbin/cryptsetup -q -s 512 \\luksFormat /dev/nvme0n1 /home/opc/key0.key4. Open the LUKS partition on disk/device and set up a mapping name.sudo /usr/sbin/cryptsetup --allow-discards \\luksOpen -d /home/opc/key0.key /dev/nvme0n1 dm-nvme0n15. Create an ext4 file system on the disk.sudo /sbin/mkfs.ext4 /dev/mapper/dm-nvme0n16. Set parameters for the ext4 file system.sudo /usr/sbin/tune2fs -e remount-ro /dev/mapper/dm-nvme0n17. Mount the file system to a specified directory.sudo mount /dev/mapper/dm-nvme0n1 /ons/nvme0n1dm-crypt enabled disk to normal disk:If you want to convert the encrypted disk back to its normal state, execute the followingsteps:1. Unmount the file system on the disk.sudo umount -l /ons/nvme0n12. Remove luks mapping.sudo /usr/sbin/cryptsetup luksClose /dev/mapper/dm-nvme0n13. Create an ext4 file system on the disk.sudo /sbin/mkfs.ext4 /dev/nvme0n1 4. Mount the file system on a specified directory.sudo mount /dev/nvme0n1 /ons/nvme0n1Note:If you convert a normal disk to a dm-crypt enabled disk or convert a dm-crypt enabled disk to a normal disk, you cannot bring the disk back to itsprevious state without losing its data. This is because the mkfs.ext4command will format the disk. Therefore, all the data stored in the disk will belost.7-48Configuring AuthenticationAuthentication means verifying the identity of someone (a user, server, or other entity)who wants to use data, resources, or applications. Validating that identity establishes atrust relationship for further interactions. Authentication also enables accountability bymaking it possible to link access and actions to specific identities.Within a secure Oracle NoSQL Database, access to the database and internal APIs isgenerally limited to authenticated users. When a secure Oracle NoSQL Database isfirst started, there are no users defined, and login to the administrative interface isallowed without authentication. However, no data access operations can be performedwithout user authentication.User ManagementYou can create, modify, or remove users in the Oracle NoSQL Database through theAdmin CLI, where the commands for manipulating users are exposed in SQL formatthrough DDL API. You can also display information about a specific user account, aswell as get a summary list of registered users. For more information, see the nextsections describing each user management operation.All user passwords should follow the password security policies. For more informationsee Password Complexity Policies.User CreationTo create a user, use the following command:CREATE USER user_name  (IDENTIFIED EXTERNALLY | IDENTIFIED BY password  [PASSWORD EXPIRE | PASSWORD LIFETIME duration_time_unit])  [ACCOUNT LOCK|UNLOCK]   [ADMIN] where:\xe2\x80\xa2 user_nameAssigns a name to identify a user. If you are creating a Kerberos user, theuser_name must match the fully qualified principal name created in the KeyDistribution Center (KDC) at your site. A username is an ID, just as a table name.The formal definition for each ID is as follows:ALPHA (ALPHA | DIGIT | UNDER)* ;Each ID must start with a letter (a-z, A-Z), followed by other letters, numericalvalues (0 - 9), and underscore (_) characters. There is no ID size limit for thenumber of characters it contains. An an ID can consist of as many characters as8-1Chapter 8User Managementthe memory required to accommodate its length. In practice, most sites havename length recommendations, but they are not checked or enforced by OracleNoSQL Database.Kerberos users must have different names from existing users, since you cannotchange the authentication type of an existing user.\xe2\x80\xa2 IDENTIFIED EXTERNALLYIndicates that Oracle NoSQL Database will use an external mechanism toauthenticate the user. Currently, Oracle NoSQL Database supports only Kerberosas an external authentication service.\xe2\x80\xa2 IDENTIFIED BY "password"Indicates that Oracle NoSQL Database authenticates the new user by thepassword you assign. The new user must log on using that password.Note:You must specify a user password with quotation marks, for example,"password".\xe2\x80\xa2 PASSWORD EXPIRESpecifies that the assigned password has already expired. With this setting theuser is forced to change the given password as soon as they initially login. Theymust enter a password of their choice (which meets any site requirements) beforeaccessing Oracle NoSQL Database.\xe2\x80\xa2 PASSWORD LIFETIME {INT duration_time_unit}Indicates the password duration unit, which is required for using the assignedpassword. Enter the integer time_unit as follows:time_unit : (SECONDS | MINUTES | HOURS | DAYS) Using zero (0) with any time unit specifies that the password never expires.Entering a negative value causes an error. If you do not specify a PASSWORDLIFETIME time_unit, the lifetime from the global configuration is used. The defaultfor this parameter is 180 days.Following is a basic example of creating new user Kate, IDENTIFIED BY apassword you assign to her, represented here as "password", with a PASSWORDLIFETIME duration specifying the integer unit of time as 30 DAYS. We do notrecommend using this practice.kv-> execute \'CREATE USER Kate IDENTIFIED BY \\\xe2\x80\x9dpassword\\\xe2\x80\x9d   PASSWORD LIFETIME: 30 DAYS\'\xe2\x80\xa2 ACCOUNT {LOCK | UNLOCK}Specify ACCOUNT LOCK to lock a user\'s account to disable access. An Admin canuse this option to remove access from a user, but retain the account. Then, asrequired, reinstate the user account specifying ACCOUNT UNLOCK.8-2Chapter 8User Management\xe2\x80\xa2 ADMIN ClauseSpecify ADMIN to grant the user sysadmin role automatically.Note:To create the first user in an Oracle NoSQL Database instance, you muststart the Admin CLI as an anonymous user and use the plan create-usercommand. However, creating an initial user is only one of several steps forsetting up a secure site, and is not described here. For further explanation,see, Performing a Secure Oracle NoSQL Database Installation.User ModificationTo alter a user, use the following command:ALTER USER user_name [IDENTIFIED BY password[RETAIN CURRENT PASSWORD]] [CLEAR RETAINED PASSWORD] [PASSWORD EXPIRE][PASSWORD LIFETIME duration] [ACCOUNT UNLOCK|LOCK] where:\xe2\x80\xa2 user_nameName of user to alter. If specifying a Kerberos user, you can only alter theACCOUNT clause options.\xe2\x80\xa2 IDENTIFIED ClauseSpecify BY password to specify a new password for the user.\xe2\x80\xa2 RETAIN CURRENT PASSWORDUsed with BY password clause. If specified, causes the current password definedfor the user to be remembered as a valid alternate password for a limited duration(24 hours by default), or until the password is explicitly cleared. Only one alternatepassword may be retained at a time. This option allows a password to be changedwhile an application is still running without affecting its operation.\xe2\x80\xa2 CLEAR RETAINED PASSWORD ClauseErases the current alternate retained password.\xe2\x80\xa2 PASSWORD EXPIRECauses the user\'s password to expire immediately, then the user or the userhaving sysadmin role must change the password before attempting to log in to thedatabase following the expiration.\xe2\x80\xa2 PASSWORD LIFETIME durationSpecify the duration that current password can be used for authentication.duration: [0-9]+ unitunit: S | M | H | SECONDS | MINUTES | HOURS | DAYS 8-3Chapter 8User ManagementNote that specifying 0 time unit for PASSWORD LIFETIME will make thepassword as "never expired".\xe2\x80\xa2 ACCOUNT ClauseSpecify ACCOUNT LOCK to lock the user\'s account and disable access. SpecifyACCOUNT UNLOCK to enable the user.If you are updating the password of an existing user, the new password should complywith the password security policies. For more information see Password ComplexityPolicies.User RemovalDROP USER user_name [CASCADE]Use the DROP USER user_name command to remove the specified user account (userscannot remove themselves), where user_name is the name of the user to drop.If the user has existing tables, drop each of the tables first, and then drop the user.Alternatively, use the optional CASCADE option, which drops the user tables along withthe user.For example:kv-> execute \'DROP USER Kate CASCADE\'Dropping a user occurs immediately. If another user was accessing tables that theuser owned, the tables are no longer available for DML or DDL operations.User StatusSHOW USER[S] [-name user_name] [-json | -json-v1]Notice that the S on the SHOW USERS command is optional for the Admin CLI, except forDDL statements you call with execute. For DDL "SHOW USER -name user_name"shows information about a single user, and SHOW USERS displays information about allusers.Note:The SHOW USERS command differs between the Admin CLI and the SQL CLI.This section describes the differences wherever possible. For example, theJSON options are not available for all the Admin CLI commands.From the SQL CLI, add one of the -json flags to output the information in JSON.8-4Chapter 8User ManagementFrom the Admin CLI, use the SHOW USERS without further qualification to list all existingusers in the system. For example, here are three users in the system:kv-> execute \'SHOW USERS\'user: id=u1 name=Kenuser: id=u2 name=Kateuser: id=u3 name=Alice Note:The User ID values are incremented sequentially as you add each user.They are an internal mechanism for ensuring each user is unique.From the Admin CLI, specify SHOW USERS -name user_name to view detailedinformation about a specific user:kv-> execute \'SHOW USERS -name Kate\'id=u2 name=kate enabled=true auth-type=LOCAL retain-passwd=inactivegranted-role=[public]From the SQL CLI, you can omit the -name flag:sql-> show user KateFrom this CLI, entering SHOW USER name automatically interprets name as a user_name.To specify a Kerberos user from the Admin CLI, the returned auth-type value isEXTERNAL:kv-> execute \'SHOW USERS krbuser@EXAMPLE.COM\'user: id=u4 name=krbuser@EXAMPLE.COM enabled=true auth-type=EXTERNALretain-passwd=inactive granted-roles=[readwrite, public, sysadmin]User LoginYou can use either the -username <user> or the -security <path to securityfile> runadmin argument to login to the admin CLI:\xe2\x80\xa2 -username <user>Specifies the username to log in as. This option is used in conjunction withsecurity properties like oracle.kv.transport.\xe2\x80\xa2 -security <path-to-security-file>Specifies the security file that contains property settings for the login. Relativefilename references within the security file are interpreted relative to the location ofthe security properties file. For example, if a security properties file contains thesetting oracle.kv.ssl.truststore=client.trust then, the client.trust file should8-5Chapter 8User Managementbe in the same directory as the security properties file. If the file is named with anabsolute path then it can be anywhere in the file system.The following properties can be set in the file in addition to any of the SSLcommunication properties documented in the previous chapter:oracle.kv.auth.usernameoracle.kv.auth.wallet.diroracle.kv.auth.pwdfile.file where the oracle.kv.auth.wallet.dir and oracle.kv.auth.pwdfile.file properties in thisfile indicate the location of an EE wallet directory or CE password store file,respectively.Note:The oracle.kv.security Java system property can be used as analternative mechanism for providing a security file path. Setting thissystem property is equivalent to adding the -security option to thecommand line for the Admin CLI . This property is supported by all toolsas well as by the KVStore client library.Password ManagementThe Admin can configure the lifetime of users\xe2\x80\x99 passwords for various units of time, ormake them expire immediately. When a password expires, the user needs to renew itto log in Oracle NoSQL Database successfully. All user passwords should follow thepassword security policies. For more information see Password Complexity Policies.The two ways to manage passwords from expiring are as follows:\xe2\x80\xa2 Explicit ExpirationIt makes the current password expire immediately as well as the retainedpassword, if it exists. For this user, the user must change the password beforeattempting to log in the database.For example:kv-> execute \'CREATE USER John IDENTIFIED BY \\\xe2\x80\x9dpassword\\\xe2\x80\x9d PASSWORD EXPIRE\'\xe2\x80\xa2 Password Lifetime ConfigurationIf a user logs into the database with John\xe2\x80\x99s account, the user must input the newpassword for John.Logged in admin as JohnThe password of John has expired, it is required to change the password.Enter the new password:Re-enter the new password:8-6Chapter 8SessionsPassword lifetime limits the duration that current password can be used forauthentication.Note:This configuration only works for the current password but not theretained one.For example:kv-> execute \'ALTER USER John PASSWORD LIFETIME 15 days\'In the example above, the current password for user John will expire after 15 days.After expiration, if the user John attempts to log into the database, the systemdisplays a notification to change the password.A retained password is used to allow a password to be changed while anapplication is still running without affecting its operation. It is only saved by thesystem for a limited duration (24 hours) and there is no way to specify individualduration for each user. For retained password, only explicit expiration is supportedusing the following command:kv->execute \'ALTER USER John CLEAR RETAINED PASSWORD\' SessionsWhen a user successfully logs in, it receives an identifier for a login session that allowsa single login operation to be shared across Storage Nodes. That session has an initiallifetime associated with it, after which the session is no longer valid.The server notifies the user with an error once the session is no longer valid. Theapplication then needs to re-authenticate.Note:The KVStoreFactory API provides a reauthentication handler, which allowsthe reauthentication to be completed transparently, except for the delay inreauthentication processing.If allowed, the Oracle NoSQL Database client will transparently attempt to extendsession lifetime. For best results, your application should include logic to deal withreauthentication, as operational issues could prevent it from succeeding initially. In thisway, you can avoid the use of extended logic in your application to reacquire a validsession state.You can configure the behavior regarding session management to meet the needs ofthe application and environment. To do this, you can modify the following parametersusing the plan change-parameters command: sessionTimeout,8-7Chapter 8SessionssessionExtendAllowed and loginCacheTimeout. For more information, see SecurityPolicy Modifications8-89Configuring AuthorizationOracle NoSQL Database provides role-based authorization which enables the user toassign kvstore roles to user accounts to define accessible data and allow databaseadministrative operations for each user account.Users can acquire desired privileges by role-granting. The user-defined role featureallows the user to create new roles using kvstore built-in privileges, and add newprivilege groups to users by assigning newly-defined roles to users. You can grantusers multiple roles.For more information, see:\xe2\x80\xa2 Privileges\xe2\x80\xa2 Roles\xe2\x80\xa2 Managing Roles, Privileges and UsersPrivilegesA privilege is an approval to perform an operation on one or more Oracle NoSQLDatabase objects. In Oracle NoSQL Database, all privileges fall into the two generalcategories:\xe2\x80\xa2 System privilegesThis gives a user the ability to perform a particular action, or to perform an actionon any data objects of a particular type.\xe2\x80\xa2 Object privilegesThis gives a user the ability to perform a particular action on a specific object, suchas a table.System PrivilegesOracle NoSQL Database provides the following system privileges, covering both dataaccess and administrative operations:\xe2\x80\xa2 SYSDBACan perform Oracle NoSQL Database management, including table create/drop/evolve, index create/drop and Avro schema create/evolve.\xe2\x80\xa2 SYSVIEWCan view/show system information, configuration and metadata.\xe2\x80\xa2 DBVIEWCan query data object information. The object is defined as a resource in OracleNoSQL Database, subject to access control. At present, you can have thisprivilege to query the table, index and Avro schema\'s information.9-1Chapter 9Privileges\xe2\x80\xa2 USRVIEWCan query users\' own information, like their own user information, the status ofcommands they issued.\xe2\x80\xa2 SYSOPERCan perform Oracle NoSQL Database system configuration, topologymanagement, user privilege/role management, diagnostic and maintenanceoperations. Allows a role to perform cancel, execute, interrupt, and wait on anyplan.\xe2\x80\xa2 READ_ANYCan get/iterate keys and values in the entire store, including any tables.\xe2\x80\xa2 WRITE_ANYCan put/delete values in the entire store, including any tables.\xe2\x80\xa2 CREATE_ANY_TABLECan create any table in the store.\xe2\x80\xa2 DROP_ANY_TABLECan drop any table from the store.\xe2\x80\xa2 EVOLVE_ANY_TABLECan evolve any table in the store.\xe2\x80\xa2 CREATE_ANY_INDEXCan create any index on any table in the store.\xe2\x80\xa2 DROP_ANY_INDEXCan drop any index from any table in the store.\xe2\x80\xa2 READ_ANY_TABLECan read from any table in the store.\xe2\x80\xa2 DELETE_ANY_TABLECan delete data from any table in the store.\xe2\x80\xa2 INSERT_ANY_TABLECan insert and update data in any table in the store.Object PrivilegesThe object privileges defined in Oracle NoSQL Database are:\xe2\x80\xa2 READ_TABLECan read from a specific table.\xe2\x80\xa2 DELETE_TABLECan delete data from a specific table.\xe2\x80\xa2 INSERT_TABLECan insert and update data to a specific table.\xe2\x80\xa2 EVOLVE_TABLE9-2Chapter 9PrivilegesCan evolve a specific table.\xe2\x80\xa2 CREATE_INDEXCan create indexes on a specific table.\xe2\x80\xa2 DROP_INDEXCan drop indexes from a specific table.For more information on the privileges required by the user to access specific KVStoreAPIs as well as CLI commands, see KVStore Required Privileges.Table OwnershipWhen you are using a secure store, tables are owned by the user that created them. Atable\'s owner has by default full privileges to the table. That is, the owner has all thetable object privileges.Note:For tables created in a non-secured store, or tables created prior to the 3.3release, the table\'s owner is null.Once a table is created, its owner cannot be changed. If a table is dropped and thenrecreated, all previously granted table privileges must be granted again.Parent and child tables are required to have the same owner. However, tableprivileges are not automatically granted to the table\'s children. For example, ifREAD_TABLE is granted to table myTable, then that privilege is not automatically grantedto any of that table\'s children. To grant READ_TABLE to the child tables, you mustindividually grant the privilege to each child table in turn.A table\'s owner can grant or revoke all table privileges to or from other roles. To dothis, use the GRANT DDL statement. (See Grant Roles or Privileges for details.) Tomake a user other than the owner be able to read/insert/delete a specific table, twoconditions must be met:1. The user has the read/insert/delete privilege for the table in question; and2. The user has the same privilege, or read privilege, for all parent tables of thattable.For example, for table myTable and its child myTable.child1, a non-owner user canonly insert data to myTable.child1 when she has insert privilege (or better) onmyTable.child1, and read and/or insert privilege on myTable.Privilege HierarchyIn Oracle NoSQL Database, there is a relationship between parts of existing privileges,called \'implications\'. Implication means that a privilege may be a superset of someother privileges.For example, Privilege A implies (=>) B means that privilege A has all the permissionsdefined in privilege B.9-3Chapter 9RolesThe following illustration depicts all implication relationship among Oracle NoSQLDatabase privileges:Note:All implications are transitive, that is, if A=>B and B=>C, then A=>C.RolesIn Oracle NoSQL Database a role is a set of privileges that defines the authority andresponsibility of users assigned to the role. Oracle NoSQL Database provides a set ofsystem built-in roles. Users can create new roles to group together privileges or otherroles.System Built-in RolesThe following system roles are predefined:\xe2\x80\xa2 readonlyContains the READ_ANY privilege. Users with this role can read all data in theKVStore.\xe2\x80\xa2 writeonlyContains the WRITE_ANY privilege. Users with this role can write to the entireKVStore.\xe2\x80\xa2 readwriteContains both the READ_ANY and WRITE_ANY privileges. Users with this rolecan both read and write the entire KVStore.\xe2\x80\xa2 dbadminContains the SYSDBA privilege. Users with this role can execute data definitionoperations, including table, index and Avro schema administration.\xe2\x80\xa2 sysadminContains the SYSDBA, SYSVIEW and SYSOPER privileges. Users with this rolecan execute the same operations as dbadmin, and have the ability of executing all9-4Chapter 9RolesOracle NoSQL Database management tasks. A user created with the -adminoption is granted with the sysadmin role besides the default public role.\xe2\x80\xa2 publicContains the USRVIEW and DBVIEW privileges. A default role for all OracleNoSQL Database users, which cannot be revoked. Users with this role can login todatabase, view and change their own user information, as well as check andoperate the plans owned by them. Users with this role can also obtain a read-onlyview of the data object information, for example, table names, indices, and others.User-Defined RolesOracle NoSQL Database allows the user to create new roles using kvstore built-inprivileges, and add new privilege groups to users by assigning defined roles to theusers. To perform role and privilege granting and revocation operations, the user musthave a role having SYSOPER privilege, for example, the sysadmin role.To manage user-defined roles, use the following commands from the Admin CLI:kv-> execute \'CREATE ROLE role_name\' kv-> execute \'DROP ROLE role_name\' Note:The names of user-defined roles are case-insensitive, and are not the sameas any existing privilege names or names of system built-in roles. Also, areserved keyword cannot be used as a role name. For a list of reservedkeywords, see Name Constraints in the Table Data Definition LanguageOverview appendix of the Oracle NoSQL Database Getting Started with theTable API guide.The following example shows how to create user-defined roles and grant them to, orrevoke them from users:Create two users with the following commands:kv-> execute \'CREATE USER Ken IDENTIFIED BY \\\xe2\x80\x9dpassword\\\xe2\x80\x9d \'kv-> execute \'CREATE USER Kate IDENTIFIED BY \\\xe2\x80\x9dpassword\\\xe2\x80\x9d \'Now, create two roles \xe2\x80\x93 manager with the write_any privilege and employee with theread_any privilege:kv-> execute \'CREATE ROLE manager\'kv-> execute \'GRANT WRITE_ANY TO manager\'9-5Chapter 9Managing Roles, Privileges and Userskv-> execute \'CREATE ROLE employee\'kv-> execute \'GRANT READ_ANY TO employee\'The next example shows granting role employee to role manager (sub-role ofmanager), and then grants role manager to user Kate. User Kate then has bothmanager and employee role, with both of their privileges, to write_any data to the store,and read_any data.kv-> execute \'GRANT employee TO ROLE manager\'kv-> execute \'GRANT manager TO USER Kate\'Use the following command to see the user\xe2\x80\x99s role status:kv-> execute \'SHOW USER Kate\'id=u2 name=Kate enabled=true type=LOCAL retain-passwd=inactivegranted-role=[public, manager]Once the user drops a role, this role and its sub-roles will be revoked automaticallyfrom any users and user-defined roles having this role. However, all of its sub-roles willnot be removed from the Oracle NoSQL Database.For example:kv-> execute \'DROP ROLE manager\'kv->execute \'SHOW USERS Kate\'id=u2 name=Kate enabled=true type=LOCAL retain-passwd=inactivegranted-role=[public]Now, the show roles command will list the roles in the system without the \'manager\'role.If the administrator decides to drop the manager role, the system revokes the managerrole from user Kate automatically, as well as the employee role. In the above example,Kate cannot perform any read or write operations.Note:Granting circular roles is not allowed. For example, role manager cannot begranted to role employee if role employee has previously been granted to rolemanager.Managing Roles, Privileges and UsersOracle NoSQL Database provides a set of security operations, including commands tocreate, drop, show, grant or revoke roles to or from users, and to grant or revokeprivileges to or from roles. All these statements can be executed through the SQL CLI9-6Chapter 9Managing Roles, Privileges and Usersor the Admin CLI execute command, or the API of KVStore.execute() orKVStore.executeSync().Role CreationCREATE ROLE role_name Where, role_name is the case insensitive name of the role.For example,kv-> execute \'CREATE ROLE administrator\'Statement completed successfully Role RemovalDROP ROLE role_name Where, role_name is the name of the role, which is case insensitive.For example,kv-> execute \'DROP ROLE administrator\'Statement completed successfully Role StatusSHOW [AS JSON] ROLES | ROLE role_name Where, role_name is the name of the role.List all available role names by running \'SHOW ROLES\', or view the detailedinformation of a role if the role name is specified.For example,kv->execute \'SHOW ROLES\'role:name=dbadminrole:name=publicrole:name=readonlyrole:name=readwriterole:name=sysadminrole:name=writeonly The detailed information of a role can be viewed by specifying the role name:kv->execute \'SHOW ROLE dbadmin\'name=dbadmin assignable=true readonly=truegranted-privileges=[SYSDBA, DBVIEW] 9-7Chapter 9Managing Roles, Privileges and UsersNote:Assignable indicates whether this role can be explicitly granted to or revokedfrom a user.Object privileges will appear in the form of PRIVILEGE(obj). For example, privilege ofREAD_TABLE on table \'emp\' will appear as:kv->execute \'CREATE ROLE emptablereader\'kv->execute \'GRANT READ_TABLE ON emp TO emptablereader\'kv->execute \'SHOW ROLE emptablereader\'name=emptablereader assignable=true readonly=falsegranted-privileges=[READ_TABLE(emp)] Grant Roles or PrivilegesGRANT { grant_roles | grant_system_privileges| grant_object_privileges }grant_roles ::= role [, role]... TO { USER user | ROLE role }grant_system_privileges ::={system_privilege | ALL PRIVILEGES}[,{system_privilege | ALL PRIVILEGES}]...TO rolegrant_object_privileges ::={object_privileges| ALL [PRIVILEGES]}[,{object_privileges| ALL [PRIVILEGES]}]...ON object TO role where:\xe2\x80\xa2 roleThe role that is granted.\xe2\x80\xa2 userThe user to which the privileges are granted.\xe2\x80\xa2 system_privilegesThe system privileges that are granted.\xe2\x80\xa2 object_privilegesThe object privileges that are granted.\xe2\x80\xa2 objectThe object on which the privilege is granted. Currently only table privileges aresupported.\xe2\x80\xa2 ALL PRIVILEGESGrants all of the system privileges. This is a shortcut for specifying all systemprivileges.\xe2\x80\xa2 ALL [PRIVILEGES]9-8Chapter 9Managing Roles, Privileges and UsersGrants all object privileges defined for the object. The keyword PRIVILEGES isprovided for semantic clarity and is optional.For example, you can grant a role with fewer privileges to one with more privileges,such as employee to role manager:kv-> execute \'GRANT EMPLOYEE TO ROLE manager\'kv-> execute \'GRANT MANAGER TO USER Kate\'Statement completed successfully  If you try to grant the same role in the other direction, an error occurs:kv-> execute \'GRANT employee to ROLE manager\' You will receive an error of "Could not recursively grant role employee to rolemanager" because this would lead to a cyclic definition of role manager.The user can now add new privileges to their defined role. For example:kv-> execute \'GRANT READ_ANY TO Kate\' For example, to grant read permission on table T1 to Kate:kv-> execute \'GRANT READ_TABLE on T1 TO Kate\' See also notes on granting table privileges in Table Ownership.Revoke Roles or PrivilegesREVOKE { revoke_roles | revoke_system_privileges| revoke_object_privileges}revoke_roles ::= role [, role]... FROM { USER user | ROLE role }revoke_system_privileges ::={ system_privilege | ALL PRIVILEGES }[, {system_privilege | ALL PRIVILEGES}]...FROM rolerevoke_object_privileges ::={ object_privileges| ALL [PRIVILEGES] }[, { object_privileges | ALL [PRIVILEGES] }]...ON object FROM role where:\xe2\x80\xa2 roleThe role to revoke.\xe2\x80\xa2 userThe user from which the privileges are revoked.\xe2\x80\xa2 system_privileges9-9Chapter 9Managing Roles, Privileges and UsersThe system privileges to revoke.\xe2\x80\xa2 object_privilegesThe object privileges to revoke.\xe2\x80\xa2 objectThe table from which the privileges are revoked. Currently, the only objectssupported are tables.\xe2\x80\xa2 ALL PRIVILEGESRevokes all of the system privileges that have been granted to the revokee.\xe2\x80\xa2 ALL [PRIVILEGES]Revokes all object privileges defined on the object from the revokee. The keywordPRIVILEGES is provided for semantic clarity and is optional.For example, to revoke role \'employee\' from role \'manager\':kv-> execute \'REVOKE employee FROM ROLE manager\'Statement completed successfully To revoke the role \'manager\' from user \'Kate\':kv-> execute \'REVOKE manager FROM USER Kate\'Statement completed successfully 9-1010Security PoliciesThe following default policies in Oracle NoSQL Database may be used to tailor systembehavior to meet your security requirements:\xe2\x80\xa2 Login sessions have a limited duration of validity. After that duration has passed,the session needs re-authentication.\xe2\x80\xa2 Session login errors are tracked at the component level. Access to an account fora single client host is temporarily disabled if too many failed logins occur at thatcomponent within a configurable time duration.Note:Both of these behaviors can be customized by modifying the values oftheir respective security parameters. For more information, see thefollowing section.Security Policy ModificationsYou can use the plan change-parameters command in order to change a securitypolicy in the system:plan change-parameters -security <id>...Security parameters are applied implicitly and uniformly across all SNs, RNs andAdmins.The following security parameters can be set:\xe2\x80\xa2 sessionTimeout=<Long TimeUnit>Specifies the length of time for which a login session is valid, unless extended.The default value is 24 hours.\xe2\x80\xa2 sessionExtendAllowed=<Boolean>Indicates whether session extensions should be granted. Default value is true.\xe2\x80\xa2 accountErrorLockoutThresholdInterval=<Long TimeUnit>Specifies the time period over which login error counts are tracked for accountlockout monitoring. The default value is 10 minutes.\xe2\x80\xa2 accountErrorLockoutThresholdCount=<Integer>Number of invalid login attempts for a user account from a particular host addressover the tracking period needed to trigger an automatic account lockout for a host.The default value is 10 attempts.\xe2\x80\xa2 accountErrorLockoutTimeout=<Long TimeUnit>10-1Chapter 10Security Policy ModificationsTime duration for which an account will be locked out once a lockout has beentriggered. The default value is 30 minutes.\xe2\x80\xa2 loginCacheTimeout=<Long TimeUnit>Time duration for which KVStore components cache login information locally toavoid the need to query other servers for login validation on every request. Thedefault value is 5 minutes.10-211Audit LoggingOracle NoSQL Database monitors and records security sensitive activities. These logmessages are available through the SN-local log files and the store-wide logging view.High risky security activities are also visible by using the show events command.Security Log MessagesFor ease of grepping and analysis, the auditing log message uses KVAuditInfo as aprefix. For example:# General audit logging:<Timestamp>: KVAuditInfo[user: <user_name>, clienthost: <client_host>, operation: <operation_description>, status: <SUCCESS/FORBIDDEN>,reason: <failure_reason>] # General audit logging:# Particular logging for successful execution of plan:<Timestamp>: KVAuditInfo[<plan_name>, owned by <plan_owner>, executed by <plan_executor> from <client_host>, state=<end state of plan execution>] To distinguish security related messages from standard log messages, the followingtwo security related logging levels are introduced:\xe2\x80\xa2 SEC_WARNINGLogs unauthenticated login, unauthorized read/write data access and unauthorizedexecution of CLI commands. Unauthenticated login does not log the reasons offailure.\xe2\x80\xa2 SEC_INFOLogs the success of a user login and the successful execution of plans that requiredbadmin or sysadmin role related privileges.11-112Keeping Oracle NoSQL Database SecureThis chapter provides a set of guidelines to keep your Oracle NoSQL Databasesecure. To maximize the security features offered by Oracle NoSQL Database, it isimperative that the database itself be well protected.Security guidelines provide advice about how to securely configure Oracle NoSQLDatabase by recommending security practices for operational database deployments.Guidelines for Securing the ConfigurationFollow these guidelines to keep the security configuration secure:\xe2\x80\xa2 The initial security configuration should be generated on a host that is not intendedfor KVStore operational use, using the securityconfig create config command.\xe2\x80\xa2 Storage Nodes should be deployed by running makebootconfig with the -store-security enable argument. The configured security directory from the referencehost should be copied to the new Storage Node KVROOT using a secure copymechanism prior to starting the store.\xe2\x80\xa2 The security configuration should be kept in a protected location for future use.\xe2\x80\xa2 Updates to the security configuration should be performed on the configurationhost and copied to the operational Storage Node hosts using a secure copymechanism.\xe2\x80\xa2 After the first user is configured but before allowing applications to use the store,you may wish to restart all SNA processes on hosts running Admin processes andthen use the Admin CLI show users command to ensure that there is only thesingle user definition that is expected. This step validates that no other usercreation occurred during the period when administrative login was not required.Guidelines for Deploying Secure ApplicationsFollow these guidelines when deploying your Oracle NoSQL Database and if theproperties include oracle.kv.auth.wallet.dir in order to use Oracle wallet to hold auser password:\xe2\x80\xa2 Include the kvstore-ee.jar file in the application classpath.\xe2\x80\xa2 The kvstore-ee.jar, oraclepki.jar, osdt_cert.jar, osdt_core.jar filesshould all be made available on the application machine.Note:kvstore-ee references the other files, so they do not need to be includedin the classpath explicitly.12-1Chapter 12Guidelines for Securing the SSL protocolGuidelines for Securing the SSL protocolFollow these guidelines to keep the SSL protocol secure:\xe2\x80\xa2 When configuring SSL communication for your store, you should consider bothperformance and security.\xe2\x80\xa2 For a more secure store you should opt for higher security where possible.\xe2\x80\xa2 The Oracle JDK 7 supports TLSv1.2 as an SSL protocol level.Guidelines for using JMX securelyFollow these guidelines to securely use your Java Management Extensions (JMX)agent:\xe2\x80\xa2 If you enable JMX for a secure store, your JMX monitoring application mustaccess the store using SSL.\xe2\x80\xa2 You should consult the configuration details for the JMX product you wish to use.In this case, you can use jconsole with a secure store by running the followingcommand:jconsole -J-Djavax.net.ssl.trustStore=/home/nosql/client.trust \\node01:5000where node01 is the registry host to be monitored and 5000 is the registry portconfigured for the Storage Node.Guidelines for Updating Keystore PasswordsFollow these steps to update the keystore passwords:1. In the security directory on the configuration host run the keytool command. Youcan provide the new passwords through the keytool interactive prompt or usingarguments. For example, to set the new key and store passwords for store.keys aswell as the new store password for store.trust using the keytool prompt:Note:The 3 new passwords must be equal, otherwise the store cannot besuccessfully restarted.keytool -keypasswd -keystore store.keys -alias sharedEnter keystore password:New key password for <shared>:Re-enter new key password for <shared>: keytool -storepasswd -keystore store.keysEnter keystore password:12-2Chapter 12Guidelines for Updating Keystore PasswordsNew keystore password:Re-enter new keystore password: keytool -storepasswd -keystore store.trustEnter keystore password:New keystore password:Re-enter new keystore password: You could also run the keytool command and set the new passwords usingarguments instead. For example:keytool -keypasswd -keystore store.keys \\-alias shared -keypass <old_pwd> -new <new_pwd> -storepass <old_pwd> keytool -storepasswd -keystore store.keys \\-storepass <old_pwd> -new <new_pwd> keytool -storepasswd -keystore store.trust \\-storepass <old_pwd> -new <new_pwd> 2. If using a Password File store, skip ahead to the next step. To update the keystorepassword for wallets, use the following command:java -Xmx64m -Xms64m \\-jar <KVHOME>/lib/kvstore.jar securityconfig \\wallet secret -directory store.wallet -set -alias keystoreSecurityconfig will prompt for the new password. The new password should matchthe new one provided earlier to the keytool command.3. If using Password File stores instead of wallets, use the following command toupdate the keystore password:java -Xmx64m -Xms64m \\-jar <KVHOME>/lib/kvstore.jar securityconfig \\pwdfile secret -file store.pwd -set -alias keystoreSecurityconfig will prompt for the new password. The new password should matchthe new one provided earlier to the keytool command.4. Copy the updated store.keys, store.trust file, and either store.pwd or the contentsof store.wallet to the security directory on each host and restart the Storage Nodeusing the following commands:java -Xmx64m -Xms64m \\-jar <KVHOME>/lib/kvstore.jar stop -root KVROOT 12-3Chapter 12Guidelines for Updating Kerberos PasswordsNote:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.java -Xmx64m -Xms64m \\-jar <KVHOME>/lib/kvstore.jar start -root KVROOT&Guidelines for Updating Kerberos PasswordsThe password of Kerberos principal should be periodically changed. To do this, youcan either manually specify it by using kadmin.local or automatically randomizeprincipal keys by using the config renew-keytab command of the securityconfigtool.The syntax for this command is:config renew-keytab -root <secroot> [-secdir <security dir>][-keysalt <enc:salt[,enc:salt,..]>][-kadmin-path <kadmin utility path>][-instance-name <database instance name>][-admin-principal <kerberos admin principal name>][-kadmin-keytab <keytab file> ][-kadmin-ccache <credential cache file>] where:\xe2\x80\xa2 -keysaltSets the list of encryption types and salt types to be used for any new keyscreated. The default value is des3-cbc-sha1:normal,aes128-cts-hmac-sha1-96:normal,arcfour-hmac:normal.\xe2\x80\xa2 -kadmin-pathIndicates the absolute path of Kerberos kadmin utility. The default value is /usr/kerberos/sbin/kadmin.\xe2\x80\xa2 -instance-nameSpecifies the service principal name. The default value is the fully qualified domainname (FQDN) of the Storage Node where Oracle NoSQL Database is running.\xe2\x80\xa2 -admin-principalSpecifies the principal used to login to the Kerberos admin interface. This isrequired while using kadmin keytab or password to connect to the admin interface.\xe2\x80\xa2 -kadmin-keytabSpecifies the location of a Kerberos keytab file that stores Kerberos admin userprincipals and encrypted keys. The security configuration tool will use the specifiedkeytab file to login to the Kerberos admin interface.12-4Chapter 12Guidelines for Updating Kerberos PasswordsYou need to specify the -admin-principal flag when using keytab to login to theKerberos admin, otherwise the correct admin principal will not be recognized. Thisflag cannot be specified in conjunction with the -kadmin-ccache flag.\xe2\x80\xa2 -kadmin-ccacheSpecifies the complete path name to the Kerberos credentials cache file thatshould contain a service ticket for the kadmin/ADMINHOST. ADMINHOST is the fully-qualified hostname of the admin server or kadmin/admin service.If not specified, the user is prompted to enter the password for principal whilelogging to the Kerberos admin interface. This flag cannot be specified inconjunction with the -kadmin-keytab flag.To manually update the Kerberos principal password instead, you should follow thesesteps:1. Use kadmin.local utility to change the service principal password:kadmin.local: cpw nosql/myhostEnter password for principal nosql/myhost@EXAMPLE.COMRe-enter password for principal nosql/myhost@EXAMPLE.COM2. Regenerate the keytab file for Oracle NoSQL Database service principal.kadmin.local: ktadd \xe2\x80\x93norandkey \xe2\x80\x93k new.keytab 3. Copy the new keytab file for Oracle NoSQL Database service principal to eachStorage Node. For example:scp new.keytab kvuser@mystore:KVROOT/security/store.keytab...4. Validate the keytab file by comparing the key version number (kvno):kadmin.local:getprinc nosql/myhost@EXAMPLE.COMPrincipal: nosql/myhost@EXAMPLE.COMExpiration date: [never]Last password change: Thu Jun 04 03:16:38 UTC 2015Password expiration date: [none]Maximum ticket life: 1 day 00:00:00Maximum renewable life: 0 days 00:00:00Last modified: Thu Jun 04 03:16:38 UTC 2015 (root/admin@ORACLE.EXAMPLE.COM)Last successful authentication: [never]Last failed authentication: [never]Failed password attempts: 0Number of keys: 4Key: vno 12, aes256-cts-hmac-sha1-96Key: vno 12, aes128-cts-hmac-sha1-96Key: vno 12, des3-cbc-sha1Key: vno 12, arcfour-hmacMKey: vno 1Attributes:Policy: [none]Kadmin.local: quit# klist \xe2\x80\x93k new.keytab12-5Chapter 12Guidelines for Updating SSL Keys and CertificatesKVNO Principal---- ------------------------12 nosql/myhost@EXAMPLE.COM12 nosql/myhost@EXAMPLE.COM12 nosql/myhost@EXAMPLE.COM12 nosql/myhost@EXAMPLE.COMClient side user principals require similar password rotation. Keytab or credentialcache used to login to the database should be renewed. If kinit tool is used to createa credential cache, you should run kdestroy to clear cached tickets and re-run kinit togenerate a new credential cache.For example:# kdestroy \xe2\x80\x93c /tmp/krb5ccache# kinit \xe2\x80\x93c /tmp/krb5ccacheGuidelines for Updating SSL Keys and CertificatesIf the certificate that the server uses is going to expire, or is no longer valid, you mayneed to replace the SSL key and certificate. This section describes the procedure tocomplete this task.These directions describe creating a self-signed certificate, and an associated key,which is the default for Oracle NoSQL Database. Alternatively, you can use anexternal certificate, as described in Guidelines for Configuring External Certificates foran Existing Default Secure Installation.Updating the SSL key/certificate involves several steps:1. Create a new key/certificate pair on a storage node.2. Copy the new key/certificate pair to every storage node and merge the newcertificate into the existing trust store files: client.trust and store.trust.3. Restart each storage node sequentially.4. Copy the client.trust with the merged entries to each of the clients.5. Copy the store.keys that has the merged entries to each of the storage nodes,and restart each storage node sequentially, a second time.6. Remove the old certificate in store.trust in all the storage nodes.7. Verify that only the new certificate is in use.Complete these steps to update the SSL keys and certificates on a running store.Oracle NoSQL Database can remain operational throughout the entire process.Note:The Oracle NoSQL Database development environment used for this set oftasks has one (1) shard, with a replication factor of three (RF=3).12-6Chapter 12Guidelines for Updating SSL Keys and CertificatesBefore starting this procedure, create a temporary directory in which to store the key.In the sample output for Step 1, you\'ll see the temporary directory created as newKey,created under /Users/my_name/tmp/kvroot/:cd /Users/my_name/tmp/kvroot/ mkdir newKey For more information on security configuration files, see Security Configuration.Create a New SSL Key Certificate1. From your NoSQL development environment on one of the SN nodes, SN1, runthe securityconfig utility to create a new key in the new directory, newKey. Thenew configuration needs to specify the same keystore password as your currentconfiguration. If you do not specify a password with the -kspwd option, the utilityprompts you to set a password.cd /Users/my_name/tmp/kvroot/ mkdir newKey java -jar $KVHOME/lib/kvstore.jar securityconfig config create -root /Users/my_name/tmp/kvroot/newKey -kspwd 123456 cd newKey ~/tmp/kvroot/newKey)=> ls -Rsecurity ./security: client.security security.xml store.trust temp.cert client.trust store.keys store.wallet ./security/store.wallet: cwallet.sso (~/tmp/kvroot/newKey)=>2. On the SN node on which you created the new key, merge the truststore entriesusing the config merge-trust command, as follows. Then, continue from yourNoSQL development environment:java -jar <KVHOME>/lib/kvstore.jar securityconfig \\ config merge-trust -root <standard config dir> \\ -source-root <new config dir> java -jar $KVHOME/lib/kvstore.jar securityconfig config merge-trust -root $KVROOT1 -source-root /Users/my_name/tmp/kvroot/newKeycd $KVROOT1/security (~/tmp/kvroot/kvroot1/security)=> keytool -list -keystore store.trust Enter keystore password: <No password was needed for this Test, so we just pressed Enter> ***************** WARNING WARNING WARNING ****************** * The integrity of the information stored in your keystore * * has NOT been verified! In order to verify its integrity, *  * you must provide your keystore password.                 * ***************** WARNING WARNING WARNING ****************** Keystore type: JKS12-7Chapter 12Guidelines for Updating SSL Keys and CertificatesKeystore provider: SUN Your keystore contains 2 entries mykey_2, Feb 6, 2018, trustedCertEntry, Certificate fingerprint (SHA1): A3:75:F2:97:25:20:F9:AD:52:61:71:8F:6B:7E:B1:BB:E8:54:D1:7A mykey, Feb 6, 2018, trustedCertEntry, Certificate fingerprint (SHA1): 89:71:8C:F1:6D:7E:25:D7:AD:C4:7E:23:8C:09:0D:AC:CE:AE:3F:67Note:In a multiple Storage Node deployment, you must copy the newconfiguration (the security directory and its contents) to each StorageNode host\'s new configuration directory and run merge-trust asdescribed on each host.3. To update the SSL key, merge the new key (on SN1) into all SNs as follows:(~/tmp/kvroot/kvroot1/security)=> java -jar $KVHOME/lib/kvstore.jar securityconfig config merge-trust -root $KVROOT2 -source-root /Users/my_name/tmp/kvroot/newKey Configuration updated. (~/tmp/kvroot/kvroot1/security)=> java -jar $KVHOME/lib/kvstore.jar securityconfig config merge-trust -root $KVROOT3 -source-root /Users/my_name/tmp/kvroot/newKey Configuration updated. (~/tmp/kvroot/kvroot2/security)=> keytool -list -keystore store.trustEnter keystore password: ***************** WARNING WARNING WARNING ****************** * The integrity of the information stored in your keystore * * has NOT been verified! In order to verify its integrity, * * you must provide your keystore password.                 * ***************** WARNING WARNING WARNING ******************Keystore type: JKS Keystore provider: SUN Your keystore contains 2 entriesmykey_2, Feb 6, 2018, trustedCertEntry, Certificate fingerprint (SHA1): A3:75:F2:97:25:20:F9:AD:52:61:71:8F:6B:7E:B1:BB:E8:54:D1:7A mykey, Feb 6, 2018, trustedCertEntry, Certificate fingerprint (SHA1): 89:71:8C:F1:6D:7E:25:D7:AD:C4:7E:23:8C:09:0D:AC:CE:AE:3F:67(~/tmp/kvroot)=> cd kvroot3/security (~/tmp/kvroot/kvroot3/security)=> keytool -list -keystore store.trustEnter keystore password: ***************** WARNING WARNING WARNING ******************12-8Chapter 12Guidelines for Updating SSL Keys and Certificates * The integrity of the information stored in your keystore * * has NOT been verified! In order to verify its integrity, *  * you must provide your keystore password.                 * ***************** WARNING WARNING WARNING ****************** Keystore type: JKS Keystore provider: SUNYour keystore contains 2 entries mykey_2, Feb 6, 2018, trustedCertEntry, Certificate fingerprint (SHA1): A3:75:F2:97:25:20:F9:AD:52:61:71:8F:6B:7E:B1:BB:E8:54:D1:7Amykey, Feb 6, 2018, trustedCertEntry, Certificate fingerprint (SHA1): 89:71:8C:F1:6D:7E:25:D7:AD:C4:7E:23:8C:09:0D:AC:CE:AE:3F:67 4. Copy the updated client.trust file (the one with the merged keys) to the securitydirectory on each host so that clients can use it to access the store.Note:The store.trust and the client.trust files have the same content, butdifferent uses. The client.trust is used to authenticate client-servercommunication, and store.trust to authenticate server-servercommunication.5. From your NoSQL development environment, get the client.trust file from SN 3,as follows:(~/tmp/kvroot/kvroot3/security)=> cat client.security #Security property settings for communication with KVStore servers#Tue Feb 06 15:03:40 CST 2018 oracle.kv.ssl.trustStore=client.trust oracle.kv.transport=ssl oracle.kv.ssl.protocols=TLSv1.2,TLSv1.1,TLSv1 oracle.kv.ssl.hostnameVerifier=dnmatch(CN\\=NoSQL) 6. Check that all Replication Nodes are online (using either the Admin CLI ping orverify configuration command).7. Restart each Storage Node sequentially, making sure that each SN is completelyup before restarting the next SN. Use the following commands:java -jar <KVHOME>/lib/kvstore.jar stop -root KVROOT  java -jar <KVHOME>/lib/kvstore.jar start -root KVROOT&12-9Chapter 12Guidelines for Updating SSL Keys and Certificates8. Continuing from your NoSQL development environment, start the Admin CLI, andcheck that all RNs are up using the ping command:(~/tmp/kvroot/newKey)=> java -jar $KVHOME/lib/kvstore.jar runadmin -host localhost -port 5000 -security $KVROOT1/security/client.security Logged in admin as anonymous kv-> ping Pinging components of store HSRStore based upon topology sequence #18 10 partitions and 3 storage nodes Time: 2018-02-07 00:34:37 UTC Version: 12.2.4.5.12Shard Status: healthy:1 writable-degraded:0 read-only:0 offline:0Admin Status: healthyZone [name=Austin id=zn1 type=PRIMARY allowArbiters=false] RN Status: online:3 offline:0 maxDelayMillis:1 max CatchupTimeSecs:0 Storage Node [sn1] on localhost:5000    Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false]    Status: RUNNING   Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC  Build id: 0d00330822fc    Admin [admin1]    Status: RUNNING,MASTER    Rep Node [rg1-rn1]   Status: RUNNING,MASTER sequenceNumber:63 haPort:5011Storage Node [sn2] on localhost:6000    Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false]    Status: RUNNING   Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC  Build id: 0d00330822fc    Rep Node [rg1-rn2]    Status: RUNNING,REPLICA sequenceNumber:63 haPort:6010 delayMillis:1 catchupTimeSecs:0Storage Node [sn3] on localhost:7000    Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false]    Status: RUNNING   Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC  Build id: 0d00330822fc    Rep Node [rg1-rn3]    Status: RUNNING,REPLICA sequenceNumber:63 haPort:7010 delayMillis:? catchupTimeSecs:?9. Restart each SN sequentially. Make sure that the last one you restarted iscompletely up before continuing to the next SN:java -jar $KVHOME/lib/kvstore.jar stop -root /Users/my_name/tmp/kvroot/kvroot1 (~/hg/kv/kvstore)=> java -jar $KVHOME/lib/kvstore.jar start -root $KVROOT1 &kv-> pingPinging components of store HSRStore based upon topology sequence #1810 partitions and 3 storage nodes Time: 2018-02-06 21:23:56 UTC Version: 12.2.4.5.12 Shard Status: healthy:1 writable-degraded:0 read-only:0 offline:0 Admin Status: healthyZone [name=Austin id=zn1 type=PRIMARY allowArbiters=false]RN Status: online:3 offline:0 maxDelayMillis:0 maxCatchupTimeSecs:0 Storage Node [sn1] on localhost:5000    Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false]    Status: RUNNING   Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC  Build id: 0d00330822fc    Admin [admin1]    Status: RUNNING,MASTER    Rep Node [rg1-rn1]   Status: RUNNING,REPLICA 12-10Chapter 12Guidelines for Updating SSL Keys and CertificatessequenceNumber:62 haPort:5011 delayMillis:0 catchupTimeSecs:0 Storage Node [sn2] on localhost:6000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false] Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc       Rep Node [rg1-rn2] Status: RUNNING,MASTER sequenceNumber:62 haPort:6010 Storage Node [sn3] on localhost:7000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false] Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc       Rep Node [rg1-rn3] Status: RUNNING,REPLICA sequenceNumber:62 haPort:7010 delayMillis:0 catchupTimeSecs:0Rep Node [rg1-rn1] Status: RUNNING,REPLICA is up, now restart the next SN (~/hg/kv/kvstore)=> java -jar $KVHOME/lib/kvstore.jar stop -root /Users/my_name/tmp/kvroot/kvroot2 kv->pingPinging components of store HSRStore based upon topology sequence #1810 partitions and 3 storage nodes Time: 2018-02-06 21:25:39 UTC Version: 12.2.4.5.12Shard Status: healthy:0 writable-degraded:1 read-only:0 offline:0Admin Status: healthy Zone [name=Austin id=zn1 type=PRIMARY allowArbiters=false] RN Status: online:2 offline:1 maxDelayMillis:? maxCatchupTimeSecs:? Storage Node [sn1] on localhost:5000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false] Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc    Admin [admin1]    Status: RUNNING,MASTER    Rep Node [rg1-rn1]   Status: RUNNING,REPLICA sequenceNumber:62 haPort:5011Storage Node [sn2] on localhost:6000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false] UNREACHABLE        Rep Node [rg1-rn2] Status: UNREACHABLE Storage Node [sn3] on localhost:7000Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false] Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc        Rep Node [rg1-rn3] Status: RUNNING,REPLICAsequenceNumber:62 haPort:7010 delayMillis:? catchupTimeSecs:? (~/hg/kv/kvstore)=> java -jar $KVHOME/lib/kvstore.jar start -root $KVROOT2 & kv->pingPinging components of store HSRStore based upon topology sequence #1810 partitions and 3 storage nodes Time: 2018-02-06 21:26:09 UTC Version: 12.2.4.5.12Shard Status: healthy:1 writable-degraded:0 read-only:0 offline:0Admin Status: healthy Zone [name=Austin id=zn1 type=PRIMARY allowArbiters=false] RN Status: online:3 offline:0 maxDelayMillis:1 maxCatchupTimeSecs:0 Storage Node [sn1] on localhost:5000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false]Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 12-11Chapter 12Guidelines for Updating SSL Keys and Certificates0d00330822fc    Admin [admin1]    Status: RUNNING,MASTER    Rep Node [rg1-rn1]   Status: RUNNING,REPLICA sequenceNumber:63 haPort:5011Storage Node [sn2] on localhost:6000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false] Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc        Rep Node [rg1-rn2] Status: RUNNING,REPLICA sequenceNumber:63 haPort:6010 delayMillis:1 catchupTimeSecs:0Storage Node [sn3] on localhost:7000Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false] Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc      Rep Node [rg1-rn3] Status: RUNNING,REPLICA sequenceNumber:63 haPort:7010 delayMillis:1 catchupTimeSecs:010. Now that SN2 is up and running, restart SN3 as follows:(~/hg/kv/kvstore)=> java -jar $KVHOME/lib/kvstore.jar stop -root /Users/my_name/tmp/kvroot/kvroot3 kv-> pingPinging components of store HSRStore based upon topology sequence #1810 partitions and 3 storage nodes Time: 2018-02-06 21:26:43 UTC Version: 12.2.4.5.12Shard Status: healthy:0 writable-degraded:1 read-only:0 offline:0Admin Status: healthy Zone [name=Austin id=zn1 type=PRIMARY allowArbiters=false] RN Status: online:2 offline:1 maxDelayMillis:1 maxCatchupTimeSecs:0 Storage Node [sn1] on localhost:5000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false]Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc    Admin [admin1]    Status: RUNNING,MASTER    Rep Node [rg1-rn1]   Status: RUNNING,MASTER sequenceNumber:63 haPort:5011Storage Node [sn2] on localhost:7000Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false] Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fcRep Node [rg1-rn2] Status: RUNNING,REPLICA sequenceNumber:63 haPort:6010 delayMillis:1 catchupTimeSecs:0 Storage Node [sn3] on localhost:7000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false] UNREACHABLE     Rep Node [rg1-rn3] Status: UNREACHABLE (~/hg/kv/kvstore)=> java -jar $KVHOME/lib/kvstore.jar start -root $KVROOT3 & kv-> pingPinging components of store HSRStore based upon topology sequence #1810 partitions and 3 storage nodes Time: 2018-02-06 21:27:15 UTC Version: 12.2.4.5.12Shard Status: healthy:1 writable-degraded:0 read-only:0 offline:0 12-12Chapter 12Guidelines for Updating SSL Keys and CertificatesAdmin Status: healthyZone [name=Austin id=zn1 type=PRIMARY allowArbiters=false] RN Status: online:3 offline:0 maxDelayMillis:1 maxCatchupTimeSecs:0Storage Node [sn1] on localhost:5000Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false]Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc    Admin [admin1]    Status: RUNNING,MASTER    Rep Node [rg1-rn1]   Status: RUNNING,MASTER sequenceNumber:63 haPort:5011Storage Node [sn2] on localhost:6000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false]Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc       Rep Node [rg1-rn2] Status: RUNNING,REPLICA sequenceNumber:63 haPort:6010 delayMillis:1 catchupTimeSecs:0 Storage Node [sn3] on localhost:7000 Zone: [name=Austin id=zn1 type=PRIMARY allowArbiters=false]Status: RUNNING Ver: 12cR2.4.5.12 2018-02-06 08:51:55 UTC Build id: 0d00330822fc          Rep Node [rg1-rn3] Status: RUNNING,REPLICAsequenceNumber:63 haPort:7010 delayMillis:? catchupTimeSecs:? 11. Copy the store.keys file from the security directory of the newly generated key tothe security directory on each storage node. This copies the new generated key toreplace the old ones on the server node (SNs). Then, check that all ReplicationNodes are online and restart each Storage Node, one by one, using the followingcommands:java -jar <KVHOME>/lib/kvstore.jar stop -root KVROOT java -jar <KVHOME>/lib/kvstore.jar start -root KVROOT& These commands copy the new generated key to replace the old keys on theserver node (SNs). Then restart each of the SNs: (~/tmp/kvroot/kvroot3/security)=> cp /Users/my_name/tmp/kvroot/newKey/security/store.keys /Users/my_name/tmp/kvroot/kvroot1/security/. (~/tmp/kvroot/kvroot3/security)=> cp /Users/my_name/tmp/kvroot/newKey/security/store.keys /Users/my_name/tmp/kvroot/kvroot2/security/. (~/tmp/kvroot/kvroot3/security)=> cp /Users/my_name/tmp/kvroot/newKey/security/store.keys /Users/my_name/tmp/kvroot/kvroot3/security/. java -jar <KVHOME>/lib/kvstore.jar stop -root KVROOT java -jar <KVHOME>/lib/kvstore.jar start -root KVROOT& 12. On each Storage Node, remove the obsolete certificate mykey in store.trust.Then, rename the new certificate mykey_2 to mykey using the following command:keytool -delete -keystore KVROOT/security/store.trust \\12-13Chapter 12Guidelines for Configuring External Certificates for a new Installation -alias mykey keytool -changealias -keystore \\ KVROOT/security/store.trust -alias mykey_2 -destalias mykey This step removes the old certificate (mykey) and renames the newly createdcertificate, myKey_2, to the previous key\'s name, mykey. One key then exists, thenewly generated one, called myKey.(~/tmp/kvroot/kvroot3/security)=> keytool -delete -keystore $KVROOT1/security/store.trust -alias mykey Enter keystore password: (~/tmp/kvroot/kvroot3/security)=> keytool -delete -keystore $KVROOT2/security/store.trust -alias mykey Enter keystore password: (~/tmp/kvroot/kvroot3/security)=> keytool -delete -keystore $KVROOT3/security/store.trust -alias mykey Enter keystore password: (~/tmp/kvroot/kvroot3/security)=> keytool -changealias -keystore $KVROOT3/security/store.trust -alias mykey_2 -destalias mykey(~/tmp/kvroot/kvroot3/security)=> keytool -changealias -keystore $KVROOT2/security/store.trust -alias mykey_2 -destalias mykey(~/tmp/kvroot/kvroot3/security)=> keytool -changealias -keystore $KVROOT1/security/store.trust -alias mykey_2 -destalias mykeyVerify that the new certificate is the only one used using the following command:keytool -list -keystore KVROOT/security/store.trust (~/tmp/kvroot/newKey/security)=> keytool -list -keystore store.keys Enter keystore password: Keystore type: JKS Keystore provider: SUN Your keystore contains one entry, which is correct:shared, Feb 6, 2018, PrivateKeyEntry, Certificate fingerprint (SHA1): A3:75:F2:97:25:20:F9:AD:52:61:71:8F:6B:7E:B1:BB:E8:54:D1:7AGuidelines for Configuring External Certificates for a newInstallationFollow these steps to configure a new store to use external certificates:12-14Chapter 12Guidelines for Configuring External Certificates for a new InstallationNote:This procedure assumes you already have a Java keystore and truststoresetup. For more information see Java KeyStore Preparation.1. Collect the distinguished name from the verbose information of the externalcertificate. In this example, it is the value of the owner field.keytool -list -v -keystore store.keys alias sharedCertificate chain length: 3Certificate[1]:Owner: CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=USIssuer: CN=intermediate CA, OU=CA, O=MyCompany, ST=California, C=US 2. Prepare dnmatch expression using a distinguished name. Oracle NoSQL Databaseverifies identities of server and client while establishing SSL connection betweenthe server components. The verification is performed by checking if principalnames on each side match the specified dnmatch expressions, which uses regularexpressions as specified by java.util.regex.Pattern. The principal namesrepresent the identities, which are specified by the subject name attribute of thecertificate, represented as a distinguished name in RFC 1779 format, using theexact order, capitalization, and spaces of the attribute value. RFC 1779 defineswell-known attributes for distinguished names, including CN, L, ST O, OU, C andSTREET. If the distinguished name of the external certificate contains non-standard attributes, for example, EMAILADDRESS, then the expression used fordnmatch must replace these attribute names with an OID that is valid in RFC 1779form, or use special constructs of regular expression to skip checking theseattributes. The format for a dnmatch expression is:dnmatch(regular expression)In above example, the dnmatch expression is:dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=US)If you are using a wild card to match a certificate with a non-standard distinguishedname attribute, the dnmatch expression needs to match the attribute name in itsOID format properly. For example, if the distinguished name is:EMAILADDRESS=person@example.com, CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=USThen wild card should represent the entire EMAILADDRESS attribute name:dnmatch(.*=person@example.com, CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=US)3. Run makebootconfig to setup the secure store. Also specify the keystorepassword and dnmatch expressions in the security parameters. The keystore12-15Chapter 12Guidelines for Configuring External Certificates for an Existing Default Secure Installationpassword "password" must use the same password as the Java Keystore of theexternal certificates. See:java -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar makebootconfig \\-root KVROOT -host node01 -port 5000 -harange 5010,5020 -admin 5001 \\-store-security configure \\-pwdmgr wallet -kspwd password \\-security-param client:serverIdentityAllowed="dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=US)" \\-security-param internal:serverIdentityAllowed="dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=US)" \\-security-param internal:clientIdentityAllowed="dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=US)" \\-security-param ha:serverIdentityAllowed="dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=US)" \\-security-param ha:clientIdentityAllowed="dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=US)"4. The makebootconfig command automatically generates keystore, server, andclient truststore files using self-signed certificates. To use external certificatesinstead, you need to replace the keystore and truststore files with your own oneach server that will host a Storage Node. For example:copy store.keys store.trust client.trust KVROOT/security/ 5. Use the securityconfig tool to verify installation. For example:security-> config verify -secdir KVROOT/securitySecurity configuration verification passed.Note:For older releases (prior 4.1), you needed to verify the configurationmanually. In that case, the distinguished name of the certificate mustmatch the content inside of dnmatch in security.xml. Also, the user-generated keystore password must be the same as the one stored in thewallet (store.wallet) or the password file (store.pwd). Finally, thetruststore (store.trust) must contain the CA certificates and the oneused for Oracle NoSQL Database.6. Finally, deliver the client.trust or import the CA certificates into the client truststore.Guidelines for Configuring External Certificates for anExisting Default Secure InstallationFollow these steps to install external certificates in an existing secure NoSQLdatabase installation that uses a default security configuration and a self-signedcertificate:12-16Chapter 12Guidelines for Configuring External Certificates for an Existing Default Secure InstallationNote:This procedure assumes you already have a Java keystore and truststoresetup. For more information see Java KeyStore Preparation.1. Create a new security configuration that uses external certificates:security-> config create -root NEW_KVROOT \\-pwdmgr wallet -kspwd password \\-param "client:serverIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "internal:serverIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "internal:clientIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "ha:serverIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "ha:clientIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)"Note:NEW_KVROOT should be a temporary directory that only holds thegenerated security files.2. Replace the keystore and truststore files with your own on each server that willhost a Storage Node. For example:copy store.keys store.trust client.trust NEW_KVROOT/security/ 3. It is easier to install an external certificate if the existing store does not needs to bekept accessible during the certificate installation. To do this, you only need to copythe entire new security security configuration to each Storage Node and thenrestart all of the Storage Nodes.12-17Chapter 12Guidelines for Configuring External Certificates for an Existing Default Secure InstallationNote:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.copy -r NEW_KVROOT/security KVROOTjava -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar stop -root KVROOTjava -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar start -root KVROOT& 4. If the existing store need to be kept accessible during the credential changesinstead, then you should create an interim truststore and modify the securityparameters having dnmatch field. On the configuration host, merge the truststoreentries by using the config merge-trust command, and also import the root andintermediate certificate:java -Xmx64m -Xms64m \\-jar <KVHOME>/lib/kvstore.jar securityconfig \\config merge-trust -root KVROOT -source-root NEW_KVROOTkeytool -import -keystore KVROOT/security/store.trust -fileca.cert.pem -alias rootkeytool -import -keystore KVROOT/security/store.trust -fileintermediate.cert.pem -alias intermediatecopy KVROOT/security/store.trust KVROOT/security/client.trustNote:In a multiple Storage Node deployment, you need to copy the newconfiguration to each host\'s new configuration directory and run merge-trust on each host like in the example above.5. Copy the updated client.trust file to the security directory on each host so thatclients can use it to access the store.6. To keep the store accessible during the process, change the dnmatch value in thesecurity configuration to be a compatible one. The values specified in the variousdnmatch(xxx) expressions are a regular expression, as specified byjava.util.regex.Pattern. The compatible "dnmatch" value should be in the form ofold certificate DN | new certificate DN. In this case, the CN=NoSQL|represents the DN of the original self-signed certificate.security-> config update \\-secdir KVROOT/security \\-param "client:serverIdentityAllowed=dnmatch(CN=NoSQL|CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "internal:serverIdentityAllowed=dnmatch(CN=NoSQL|CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "internal:clientIdentityAllowed=dnmatch12-18Chapter 12Guidelines for Updating the External Certificates(CN=NoSQL|CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "ha:serverIdentityAllowed=dnmatch(CN=NoSQL|CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "ha:clientIdentityAllowed=dnmatch(CN=NoSQL|CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)"If clients set the login property oracle.kv.ssl.hostnameVerifier, change thevalue of the dnmatch field. For example:oracle.kv.ssl.trustStore=client.trustoracle.kv.transport=ssloracle.kv.ssl.protocols=TLSv1.2,TLSv1.1,TLSv1oracle.kv.ssl.hostnameVerifier=dnmatch(CN\\=NoSQL|CN\\=myhost,OU\\=TeamA, O\\=MyCompany, L\\=Unknown, ST\\=California, C\\=US)7. Check that all Replication Nodes are online and then restart each Storage Nodeone by one using the following commands:java -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar stop -root KVROOT java -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar start -root KVROOT&8. Copy the updated store.keys file to the security directory on each host. Then,check that all Replication Nodes are online and restart each Storage Node one byone using the following commands:java -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar stop -root KVROOT java -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar start -root KVROOT&9. For all Storage Nodes, remove the obsolete certificate mykey in store.trust. Also,rename the new certificate mykey_2 to mykey using the following command:keytool -delete -keystore KVROOT/security/store.trust \\-alias mykey keytool -changealias -keystore \\KVROOT/security/store.trust -alias mykey_2 -destalias mykey Guidelines for Updating the External CertificatesFollow these steps to update the external certificates for a secure installation that isalready using external certificates.12-19Chapter 12Guidelines for Updating the External CertificatesNote:This procedure assumes you already have a Java keystore and truststoresetup having the updated external certificates. For more information see Java KeyStore Preparation.1. Create a new security configuration that uses external certificates.security-> config create -root NEW_KVROOT \\-pwdmgr wallet -kspwd password \\-param "client:serverIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "internal:serverIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "internal:clientIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "ha:serverIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" \\-param "ha:clientIdentityAllowed=dnmatch(CN=myhost, OU=TeamA, O=MyCompany, L=Unknown,ST=California, C=US)" 2. Replace the keystore and server truststores with your own:copy store.keys store.trust NEW_KVROOT/security/ 3. On the configuration host, merge the truststore entries with the NEW_KVROOTdirectory. Check that all Replication Nodes are online and then restart eachStorage Node one by one using the following commands. If the updated externalcertificate uses a different distinguished name, update the dnmatch value in thesecurity configuration to a compatible one using the procedures found in Guidelines for Configuring External Certificates for an Existing Default SecureInstallation.Note:Before starting the SNA, set the environment variable MALLOC_ARENA_MAXto 1. Setting MALLOC_ARENA_MAX to 1 ensures that the memory usage isrestricted to the specified heap size.java -Xmx64m -Xms64m \\-jar <KVHOME>/lib/kvstore.jar securityconfig \\config merge-trust -root KVROOT \\-source-root <NEW_KVROOT>12-20Chapter 12Guidelines for Operating System Securityjava -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar stop -root KVROOTjava -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar start -root KVROOT& Note:You do not need to update the client truststore if the new certificates aresigned by the same Certificate Authority (CA).4. Copy the updated store.keys file to the security directory on each host. Then,check that all Replication Nodes are online and restart each Storage Node one byone using the following commands:java -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar stop -root KVROOTjava -Xmx64m -Xms64m -jar <KVHOME>/lib/kvstore.jar start -root KVROOT& 5. For all Storage Nodes, remove the obsolete certificate mykey in store.trust. Also,rename the new certificate mykey_2 to mykey using the following command:keytool -delete -keystore KVROOT/security/store.trust \\-alias mykey keytool -changealias -keystore \\KVROOT/security/store.trust -alias mykey_2 -destalias mykey Guidelines for Operating System SecurityFollow these guidelines regarding operating system security:\xe2\x80\xa2 There should be a single user identity that runs the KVStore software.\xe2\x80\xa2 The KVStore user should be in its own group, independent of other users.\xe2\x80\xa2 JE log files, audit log files, and password stores should have mode 0600 on Linux/UNIX platforms with equivalent settings for Windows systems. The simplest way toachieve this on Linux/UNIX is to set an umask of 0077.\xe2\x80\xa2 Security configuration files must be write-protected.\xe2\x80\xa2 The KVROOT directory and the security directory must be protected frommodification by other users. On UNIX/Linux this should include having the stickybit (01000) set in order to prevent renaming and deletion of files/directories.\xe2\x80\xa2 Access to the systems that are running KVStore should be limited in order to avoidthe risk of tampering.Note:Access protections do not guard against users who have sufficientlyelevated access rights (for example, the UNIX root user).12-21APassword Complexity PoliciesA set of default rules should be followed when creating or updating a user password inorder to enhance security. Password complexity policies do not apply to the SSLkeystore password.Any user that has the SYSOPER privilege can customize the global password policiesand control the password complexity when creating or updating the passwords forusers. Oracle NoSQL Database checks if the new passwords are sufficiently complexto prevent attackers to break into the system.When using the CREATE USER and ALTER USER commands, Oracle NoSQL Databasewill check if the passwords set comply with the password complexity policies.Otherwise, a message will be shown with all the violating policies. For example:kv-> exec "create user test identified by \\"password\\""Error handling commandexec "create user test identified by \\"password\\"":Error: User error in query: CreateUser failed for:Password must have at least 9 characters You can enable or disable the password complexity policy like this:kv-> change-policy -params passwordComplexityCheck=trueThen, you can change the password complexity policies by using the change-policycommand. For example:kv-> change-policy -paramspasswordMinLength=20 passwordMaxLength=50 passwordMinUpper=3passwordMinLower=3 passwordMinDigit=3 passwordMinSpecial=3 The following password security parameters can be set:Parameter Name Value Range and Type DescriptionpasswordAllowedSpecial Sub set or full set of #$%&\'()* Lists the allowed special+,-./:; <=>?@[]^_`{|} (string)~ characters.passwordComplexityCheck [true|false] (boolean) Whether to enable thepassword complexitychecking. The default value istrue.passwordMaxLength 1 - 2048 (integer) The maximum length of apassword. The default value is256.passwordMinDigit 0 - 2048 (integer) The minimum requirednumber of numeric digits. Thedefault value is 2.A-1Appendix AParameter Name Value Range and Type DescriptionpasswordMinLength 1 - 2048 (integer) The Minimum length of apassword. The default value is9.passwordMinLower 0 - 2048 (integer) The minimum requirednumber of lower case letters.The default value is 2.passwordMinSpecial 0 - 2048 (integer) The minimum requirednumber of special characters.The default value is 2.passwordMinUpper 0 - 2048 (integer) The minimum requirednumber of upper case letters.The default value is 2.passwordNotStoreName [true|false] (boolean) If true, password should notbe the same as current storename, nor is it the store namespelled backwards or with thenumbers 1\xe2\x80\x93100 appended.The default value is true.passwordNotUserName [true|false] (boolean) If true, password should notbe the same as current username, nor is it the user namespelled backwards or with thenumbers 1-100 appended.The default value is true.passwordProhibited list of strings separated by Simple list of words that arecomma (string) not allowed to be used as apassword. The defaultreserved words are:oracle,password,user,nosql.passwordRemember 0 - 256 (integer) The maximum number ofpasswords to be rememberedthat are not allowed to bereused when setting a newpassword. The default value is3.Most of the special characters in the standard US keyboard are allowed to be used ina password with exception of " (double quote) and \\ (back slash).If you want to allow certain special characters use the passwordAllowedSpecialparameter. For example:kv-> change-policy -params passwordAllowedSpecial="@# $" If you want to enforce the password complexity for existing users, then you need to setthe existing user\'s password to expired, like this:1. Review the existing users in the system:kv-> exec "show users"user:id=u1 name=rootuser:id=u3 name=user1A-2Appendix Auser:id=u4 name=user2user:id=u5 name=user3 2. Set the new password complexity policies:kv-> change-policy -paramspasswordComplexityCheck=true passwordMinLength=9passwordMinUpper=2 passwordMinLower=2passwordMinSpecial=2 passwordMinDigit=2 3. Finally, change the existing user\'s password life time to be expired:kv-> exec "alter user user1 password expire"Statement completed successfullykv-> exec "alter user user2 password expire"Statement completed successfullykv-> exec "alter user user3 password expire"Statement completed successfully In this case, user 1, 2, and 3 will need to re-new their password according to the newpolicy. For example, when trying to login with user 1, the system will prompt to changethe password:java -Xmx64m -Xms64m \\-jar kvstore.jar runadmin -host localhost \\-port 5000 -security login_fileuser1\'s password:The password of user1 has expired, it is required tochange the password.Enter the new password:Re-enter the new password: If the new password violates any password complexity policies, an exception with aviolation message will be thrown. For example:user1\'s password:The password of user1 has expired, it is required tochange the password.Enter the new password: passwordRe-enter the new password: passwordException in thread "main" oracle.kv.AuthenticationFailureException:Renew password failed:Password must have at least 9 charactersPassword must contain at least 2 upper case lettersPassword must contain at least 2 lower case letters... A-3Appendix ANote:After the password is reset, if you\xe2\x80\x99re using Oracle Wallet for externalpassword storage, you must recreate the wallet files for all your OracleNoSQL Database user accounts. See Oracle Wallet.A-4BSSL keystore generationThe keystores (store.keys and store.trust) that are automatically generated bymakebootconfig or securityconfig can also be manually created using the followingkeytool (Java built-in key and certificate management tool) commands:To generate the keypair, use the keytool -genkeypair command:keytool -genkeypair \\-keystore store.keys \\-storepass <passwd> \\-keypass <passwd> \\-alias shared \\-dname "CN=NoSQL" \\-keyAlg RSA \\-keysize 1024 \\-validity 365 To export the keypair, use the keytool -export command:keytool -export \\-file <temp file> \\-keystore store.keys \\-storepass <passwd> \\-alias shared To import the keypair, use the keytool -import command:keytool -import \\-file <temp file> \\-keystore store.keys \\-storepass <passwd>-noprompt You can also use the keytool commands described above to manually generate otherkeystore and truststore keys and substitute them for the ones that Oracle NoSQLDatabase generates, provided you adhere to the following rules:\xe2\x80\xa2 The store.keys file should have a key pair with the alias "shared".\xe2\x80\xa2 The store.keys store password (-storepass) must match the key password (-keypass)\xe2\x80\xa2 If a subject distinguished name other than CN=NoSQL is chosen for the self-signedcertificate, then you must specify the following options to the makebootconfig orsecurityconfig command:-param "ha:serverIdentityAllowed=dnmatch(SOMEDN)"-param "ha:clientIdentityAllowed=dnmatch(SOMEDN)"B-1Appendix B-param "internal:serverIdentityAllowed=dnmatch(SOMEDN)"-param "internal:clientIdentityAllowed=dnmatch(SOMEDN)"-param "client:serverIdentityAllowed=dnmatch(SOMEDN)" where SOMEDN is the distinguished name (-dname) chosen.\xe2\x80\xa2 The store password for store.trust should match the store password for store.keys.B-2CJava KeyStore PreparationThe following example demonstrates how to use keytool to prepare keystore andtruststore with external certificate. If you want to import an existing private/public keypair generated by an external tool instead, see Import Key Pair to Java Keystore.1. Generate a keypair and store it into store.keyskeytool -genkeypair -keystore store.keys \\-alias shared -keyAlg RSA -keySize 2048 \\-validity 365 -dname <xxx> \\-storepass <sslPwd>...Enter key password for <shared>(RETURN if same as keystore password): Note:Store.keys is the default name of Oracle NoSQL Database keystoreand shared is the default alias of the Oracle NoSQL Database certificateYou can customize the name by specifying a security parameter in themakebootconfig command or the securityconfig utility. Additionally, youcan specify the algorithm, size and validity of key.2. Generate a certificate request and send to CA.keytool -certreq -keystore store.keys -aliasshared -file myhost.csrEnter keystore password: 3. A public trusted CA usually signs the certificate after receiving your csr file. A pemfile is generated (myhost.cert.pem).4. Import certificates that are part of a certificate chain in order. If there are multipleintermediate certificates, they also need to be imported in order.keytool -import -file ca.cert.pem-keystore store.keys -alias rootkeytool -import -file intermediate.cert.pem -keystore store.keys-alias intermediate# After importing the root and intermediate certificates,# install the signed certificate for this server. The alias name# must be specified.keytool -import -file myhost.cert.pem -keystore store.keys-alias sharedCertificate reply was installed in keystore C-1Appendix CImport Key Pair to Java Keystore5. Verify the installation by checking the certificate content in store.keys:keytool -list -v -keystore store.keys -alias sharedCertificate chain length: 3Certificate[1]:Owner: CN=myhost, OU=TeamA, O=MyCompany, L=Unknown, ST=California, C=USIssuer: CN=intermediate CA, OU=CA, O=MyCompany, ST=California, C=US The certificate chain length should match the number of certificates in the chainthat were imported, in this case, three.6. Build server truststore (store.trust). The server truststore must contain the signedcertificate as well as the root and intermediate certificate. Note that the server andclient truststores need to use the same password as that of the keystore.keytool -export -file store.tmp-keystore store.keys -alias sharedkeytool -import -keystore store.trust -file store.tmpkeytool -import -keystore store.trust -file ca.cert.pem-alias rootkeytool -import -keystore store.trust -file intermediate.cert.pem-alias intermediate 7. Create client truststore (client.trust). In this case, import the root and intermediatecertificates into the client truststore.keytool -import -keystore client.trust-file ca.cert.pem -alias rootkeytool -import -keystore client.trust -file intermediate.cert.pem-alias intermediate Import Key Pair to Java KeystoreThis section describes how to import an existing private/public key pair into Javakeystore. This is useful if you have your own tools for generating a CA signed key pair.The procedure assumes you already have the root and intermediate certificates aswell as the private key and its signed certificate.To import an existing key pair:1. Build the certificate chain and convert the private key and certificate files into aPKCS12 file.cat myhost.pem intermediate.pem root.pem > import.pemopenssl pkcs12 -export -in import.pem -inkey myhost.key.pem-name shared > server.p122. Import the PKCS12 file into Java keystore:keytool -importkeystore -srckeystore server.p12-destkeystore store.keys -srcstoretype pkcs12 -alias shared C-2Appendix CImport Key Pair to Java Keystore3. Finally, to complete the preparation of the Java keystore, perform the proceduresfor creating the server and client truststore described in the previous section.C-3DKVStore Required PrivilegesThis section lists the user required privileges to access specific KVStore APIs as wellas CLI commands.Privileges for Accessing CLI CommandsREAD_ANY:\xe2\x80\xa2 get kvREAD_ANY_TABLE or READ_TABLE (on $table_name):\xe2\x80\xa2 get table \xe2\x80\x93name table_nameWRITE_ANY:\xe2\x80\xa2 delete kv\xe2\x80\xa2 put kvINSERT_ANY_TABLE or INSERT_TABLE (on $table_name):\xe2\x80\xa2 put table \xe2\x80\x93name table_nameDELETE_ANY_TABLE or DELETE_TABLE (on $table_name):\xe2\x80\xa2 delete table \xe2\x80\x93name table_nameSYSDBA:\xe2\x80\xa2 ddl\xe2\x80\xa2 plan add-index\xe2\x80\xa2 plan add-table\xe2\x80\xa2 plan evolve-table\xe2\x80\xa2 plan remove-index\xe2\x80\xa2 plan remove-tableCREATE_ANY_TABLE:\xe2\x80\xa2 plan add-tableDROP_ANY_TABLE:\xe2\x80\xa2 plan remove-tableEVOLVE_ANY_TABLE or EVOLVE_TABLE (on $table_name):\xe2\x80\xa2 plan evolve-table \xe2\x80\x93name table_nameCREATE_ANY_INDEX or CREATE_INDEX (on $table_name):\xe2\x80\xa2 plan add-index \xe2\x80\x93table table_nameDROP_ANY_INDEX or DROP_INDEX (on $table_name):D-1Appendix DPrivileges for Accessing CLI Commands\xe2\x80\xa2 plan remove-index \xe2\x80\x93table table_nameSYSVIEW:\xe2\x80\xa2 await-consistency\xe2\x80\xa2 logtail\xe2\x80\xa2 ping\xe2\x80\xa2 show admins\xe2\x80\xa2 show events\xe2\x80\xa2 show topology\xe2\x80\xa2 show upgrade-order\xe2\x80\xa2 show users (all users)\xe2\x80\xa2 show zones\xe2\x80\xa2 verify\xe2\x80\xa2 show parameters\xe2\x80\xa2 show perf\xe2\x80\xa2 show plans (plans created by all users)\xe2\x80\xa2 show pools\xe2\x80\xa2 show snapshotsDBVIEW:\xe2\x80\xa2 show indexes\xe2\x80\xa2 show schemas\xe2\x80\xa2 show tablesUSRVIEW:\xe2\x80\xa2 show users (for self)\xe2\x80\xa2 show plans (plans created by self)\xe2\x80\xa2 plan change-user (for self)DBVIEW and READ_ANY:\xe2\x80\xa2 aggregateSYSOPER:\xe2\x80\xa2 change-policy\xe2\x80\xa2 configure\xe2\x80\xa2 plan change-parameters\xe2\x80\xa2 plan change-storagedir\xe2\x80\xa2 plan change-user (for all users)\xe2\x80\xa2 plan deploy-admin\xe2\x80\xa2 plan deploy-datacenter\xe2\x80\xa2 plan deploy-snD-2Appendix DPrivileges for Accessing CLI Commands\xe2\x80\xa2 plan deploy-topology\xe2\x80\xa2 plan deploy-zone\xe2\x80\xa2 plan drop-user\xe2\x80\xa2 plan failover\xe2\x80\xa2 plan grant\xe2\x80\xa2 plan migrate-sn\xe2\x80\xa2 plan remove-admin\xe2\x80\xa2 plan remove-sn\xe2\x80\xa2 plan remove-zone\xe2\x80\xa2 plan repair-topology\xe2\x80\xa2 plan revoke\xe2\x80\xa2 plan start-service\xe2\x80\xa2 plan stop-service\xe2\x80\xa2 pool (all sub-commands)\xe2\x80\xa2 repair-admin-quorum\xe2\x80\xa2 snapshot (all sub-commands)\xe2\x80\xa2 topology (all sub-commands)No privilege is required for the following commands:\xe2\x80\xa2 connect\xe2\x80\xa2 exit\xe2\x80\xa2 help\xe2\x80\xa2 hidden\xe2\x80\xa2 history\xe2\x80\xa2 verbose\xe2\x80\xa2 show faults\xe2\x80\xa2 table (all sub-commands)Privilege required depends on the command being timed:\xe2\x80\xa2 timePrivilege required depends on the commands contained in the script file:\xe2\x80\xa2 loadPrivilege required depends on the privilege needed for the plan being referred to:\xe2\x80\xa2 plan cancel\xe2\x80\xa2 plan execute\xe2\x80\xa2 plan interrupt\xe2\x80\xa2 plan waitD-3Appendix DPrivileges for DDL CommandsPrivileges for DDL CommandsSYSDBA:\xe2\x80\xa2 CREATE TABLE\xe2\x80\xa2 CREATE INDEX\xe2\x80\xa2 DROP INDEX\xe2\x80\xa2 DROP TABLE\xe2\x80\xa2 ALTER TABLECREATE_ANY_TABLE:\xe2\x80\xa2 CREATE TABLEDROP_ANY_TABLE:\xe2\x80\xa2 DROP TABLEEVOLVE_ANY_TABLE or EVOLVE_TABLE (on $table_name):\xe2\x80\xa2 ALTER TABLE table_nameCREATE_ANY_INDEX or CREATE_INDEX (on $table_name):\xe2\x80\xa2 CREATE INDEX ON table_nameDROP_ANY_INDEX or DROP_INDEX (on $table_name):\xe2\x80\xa2 DROP INDEX ON table_nameSYSOPER:\xe2\x80\xa2 CREATE USER\xe2\x80\xa2 CREATE ROLE\xe2\x80\xa2 DROP USER\xe2\x80\xa2 DROP ROLE\xe2\x80\xa2 ALTER USER\xe2\x80\xa2 GRANT\xe2\x80\xa2 REVOKEDBVIEW:\xe2\x80\xa2 SHOW TABLE\xe2\x80\xa2 SHOW INDEX\xe2\x80\xa2 DESCRIBE TABLE\xe2\x80\xa2 DESCRIBE INDEXSYSVIEW:\xe2\x80\xa2 SHOW USERS\xe2\x80\xa2 SHOW ROLESUSRVIEW:D-4Appendix DPrivileges for Accessing KVStore APIs\xe2\x80\xa2 SHOW USERS (for self only)Privileges for Accessing KVStore APIsPrivilege(s) required: READ_ANY, or READ_TABLE/READ_ANY_TABLE if accessingkey-values are in tables.\xe2\x80\xa2 get\xe2\x80\xa2 multiGet\xe2\x80\xa2 multiGetIterator\xe2\x80\xa2 multiGetKeys\xe2\x80\xa2 multiGetKeysIteratorNote:For multi-XYZ and storeXYZiterator APIs, the parentKey may be null forscanning the whole store. In this case, if the user has no required roles,an empty result set will be returned rather than throwing theUnauthorizedException.\xe2\x80\xa2 storeIterator\xe2\x80\xa2 storeKeysIteratorPrivilege(s) required: WRITE_ANY, or DELETE_TABLE/DELETE_ANY_TABLE ifaccessing key-values are in tables:\xe2\x80\xa2 delete\xe2\x80\xa2 deleteIfVersion\xe2\x80\xa2 multiDeletePrivilege(s) required: WRITE_ANY, or INSERT_TABLE/INSERT_ANY_TABLE ifaccessing key-values are in tables:\xe2\x80\xa2 put\xe2\x80\xa2 putIfAbsent\xe2\x80\xa2 putIfPresent\xe2\x80\xa2 putIfVersionPrivilege(s) required: DBVIEW\xe2\x80\xa2 getAvroCatalogPrivilege(s) required: None:\xe2\x80\xa2 getOperationFactory\xe2\x80\xa2 getStatsPrivilege(s) required: Union of all required roles of each single operation in theoperation list:\xe2\x80\xa2 executeD-5Appendix DPrivileges for Accessing KVStore TableAPIsPrivilege required depends on the privilege needed for the statement being executed:\xe2\x80\xa2 execute(String statement)\xe2\x80\xa2 executeSync(String statement)Privileges for Accessing KVStore TableAPIsPrivileges(s) required: READ_TABLE/READ_ANY_TABLE:\xe2\x80\xa2 get\xe2\x80\xa2 multiGet\xe2\x80\xa2 multiGetKeys\xe2\x80\xa2 tableIterator\xe2\x80\xa2 tableIKeysIteratorPrivilege(s) required: DELETE_TABLE/DELETE_ANY_TABLE:\xe2\x80\xa2 delete\xe2\x80\xa2 deleteIfVersion\xe2\x80\xa2 multiDeletePrivilege(s) required: INSERT_TABLE/INSERT_ANY_TABLE:\xe2\x80\xa2 put\xe2\x80\xa2 putIfAbsent\xe2\x80\xa2 putIfPresent\xe2\x80\xa2 putIfVersionPrivilege(s) required: USRVIEW:\xe2\x80\xa2 getTable\xe2\x80\xa2 getTablesPrivilege(s) required: None:\xe2\x80\xa2 getTableOperationFactoryPrivilege(s) required: Union of all required roles of each single operation in theoperation list:\xe2\x80\xa2 executePrivileges for Accessing KvLargeObject APIsPrivilege(s) required: READ_ANY:\xe2\x80\xa2 getLOBPrivilege(s) required: READ_ANY and WRITE_ANY:\xe2\x80\xa2 appendLOB\xe2\x80\xa2 deleteLOB\xe2\x80\xa2 putLOBD-6Appendix DPrivileges for Accessing KvLargeObject APIs\xe2\x80\xa2 putLOBIfAbsent\xe2\x80\xa2 putLOBIfPresentD-7EConfiguring the Kerberos AdministrativeUtilityBefore using kadmin, you first need to configure permissions on the KDC. Kerberosuses an Access Control List (ACL) file to determine which principals haveadministrative access to the Kerberos database and their level of access.The default location of the Kerberos ACL file is <LOCALSTATEDIR>/krb5kdc/kadm5.acl, where LOCALSTATEDIR is the directory prefix where the KDC databases arelocated. This location can be modified by the acl_file variable in kdc.conf.Lines containing ACL entries have this format:principal  permissions  [target_principal  [restrictions] ]Note:Line order in the ACL file is important. The first matching entry will controlaccess for an actor principal on a target principal.To configure kadmin, perform the following steps:1. Create an access control list file and put the Kerberos principal of at least one ofthe administrators into it. For example:*/admin@EXAMPLE.COM  *In this case, any principal in the EXAMPLE.COM realm with an admin instance has alladministrative privileges on the KDC.For example, joe/admin@EXAMPLE.com has all privileges over the realm\'s Kerberosdatabase.2. Create the first principal before accessing the KDC remotely:kadmin.local: addprinc -randkey admin/adminkadmin.local: ktadd \xe2\x80\x93k kadm5.keytab admin/admin Note:To enable passwordless autentication, copy kadm5.keytab to any clientmachine.E-1Appendix EKadmin can also be used to perform security maintenance. For more information, see Guidelines for Updating Kerberos Passwords.E-2FManually Registering Oracle NoSQLDatabase Service PrincipalThe securityconfig tool allows you to create service principals and generate keytabsassuming that each Storage Node is able to access the Kerberos admin interfaceremotely. Although this is the typical configuration most Kerberos deployments have,you may want to use a non-standard configuration. You can manage service principalsby using only kadmin.local or ktutil utility on the KDC host.To register Oracle NoSQL Database service principal by using kadmin.local:1. Register the service principal:kadmin.local: addprinc -randkey nosql/abc.example.com2. Extract the keytab file using the ktadd command:kadmin.local: ktadd \xe2\x80\x93norandkey \xe2\x80\x93k keytab nosql/abc.example.com 3. Verify the entries of the generated keytab using the klist tool:klist \xe2\x80\x93k \xe2\x80\x93e /tmp/keytabKeytab name: FILE:keytabKVNO Principal---- ------------------------------------------------12   nosql/abc.example.com@EXAMPLE.COM                            (AES-128 CTS mode with 96-bit SHA-1 HMAC)12   nosql/abc.example.com@EXAMPLE.COM                            (AES-256 CTS mode with 96-bit SHA-1 HMAC) 4. Copy the keytab of Oracle NoSQL Database server principal to each StorageNode. The default location is under kvroot/security. You need to create thesecurity directory.5. Run makebootconfig or securityconfig utility to complete the rest of the Kerberossecurity configuration.To register Oracle NoSQL Database service principal by using ktutil utility:1. Add principal entries:ktutil: add_entry \xe2\x80\x93password \xe2\x80\x93p \\nosql/abc.example.com \xe2\x80\x93k 1 \xe2\x80\x93e aes128-cts-hmac-sha1-96Password for nosql/abc.example.com@EXAMPLE.COM:ktutil:add_entry \xe2\x80\x93password \xe2\x80\x93p nosql/abc.example.com \\\xe2\x80\x93k 1 \xe2\x80\x93e aes256-cts-hmac-sha1-96Password for nosql/abc.example.com@EXAMPLE.COM F-1Appendix F2. Write the current keylist into the keytab file:Ktutil: write_kt keytab 3. Verify the entries of the generated keytab using the klist tool:klist \xe2\x80\x93k \xe2\x80\x93e /tmp/keytabKeytab name: FILE:keytabKVNO Principal---- ------------------------------------------------12   nosql/abc.example.com@EXAMPLE.COM                            (AES-128 CTS mode with 96-bit SHA-1 HMAC)12   nosql/abc.example.com@EXAMPLE.COM                            (AES-256 CTS mode with 96-bit SHA-1 HMAC) 4. Copy the keytab of Oracle NoSQL Database server principal to each StorageNode. The default location is under kvroot/security. You need to create thesecurity directory.5. Run makebootconfig or securityconfig utility to complete the rest of the Kerberossecurity configuration.F-2GThird Party LicensesAll of the third party licenses used by Oracle NoSQL Database are described in the License document.G-1